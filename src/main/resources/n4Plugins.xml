<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<extension name="RALForUnitRePlannedWI" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" description="The groovy will be called on event SRV_VGM_WEIGHT and shall replan active WI. This event is recorded by RTG driver in N4 Mobile Yard Inspections program" contents="/*&#xA; * $Id$&#xA; * Copyright (c) 2017 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;package com.navis.extension.ral&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.IEvent&#xA;import com.navis.argo.business.api.IEventType&#xA;import com.navis.argo.business.api.Serviceable&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.LogUtils&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.rules.EventType&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.commons.net.telnet.TelnetClient&#xA;import org.apache.log4j.Level&#xA;import org.jetbrains.annotations.NotNull&#xA;/**&#xA; *&#xA; * @author &lt;a href=&quot;mailto:sumant.kumar@navis.com&quot;&gt;Sumant Kumar&lt;/a&gt;&#xA; *&#xA; * Date: 19-09-2017&#xA; * JIRA: CSDV-4747&#xA; * SFDC: 00173627&#xA; *&#xA; *&#xA; * Description: This groovy script is written to provide solution for the SFDC 00173627.&#xA; *              RAL would like to replan the unit with the changes to &quot;VGM Weight&quot; forcefully to XPS.&#xA; *&#xA; * S.no   Modified Date     Modified By     Jira Id     SFDC        Change Description&#xA; * 1&#x9;  13-03-2021&#x9;&#x9;Pravin Kumar&#x9;CSDV-6733   00225488    Groovy migration from N4 3.5.15 to N4 3.8.13.1 version&#xA; *&#xA; */&#xA;public class RALForUnitRePlannedWI extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    /**&#xA;     * Triggered from a General Notice.&#xA;     * @param inGroovyEvent&#xA;     */&#xA;    public void execute(@NotNull final GroovyEvent inGroovyEvent) {&#xA;        LogUtils.setLogLevel(RALForUnitRePlannedWI.class, Level.INFO);&#xA;        log(Level.INFO, String.format(&quot;At start of %s at %s&quot;, getClass().getName(), ArgoUtils.timeNow()));&#xA;&#xA;        // verify if the groovy event is configured with entity Unit.&#xA;        if (!inGroovyEvent.getEntity() instanceof Unit) {&#xA;            log(Level.WARN, String.format(&quot;Bad configuration: General Notice should be for entity Unit, instead is %s&quot;,&#xA;                    inGroovyEvent.getEntity().getEntityName()));&#xA;            return;&#xA;        }&#xA;&#xA;        // verify if the groovy event is configured for the correct event type SRV_VGM_WEIGHT&#xA;        if (!SRV_VGM_WEIGHT.equalsIgnoreCase(inGroovyEvent.getEvent().getEvntEventType().getEvnttypeId())) {&#xA;            log(Level.WARN, String.format(&quot;Bad configuration: General Notice triggered on event %s, expected one of: %s&quot;,&#xA;                    inGroovyEvent.getEvent().getEvntEventType().getEvnttypeId(), SRV_VGM_WEIGHT));&#xA;            return;&#xA;        }&#xA;&#xA;        final Unit unit = (Unit) inGroovyEvent.getEntity();&#xA;        if (unit == null) {&#xA;            log(Level.WARN, String.format(&quot;RALForUnitRePlannedWI groovy expected Unit object but it is found %s : &quot;,&#xA;                    unit));&#xA;            return;&#xA;        }&#xA;&#xA;        final GeneralReference generalReference = GeneralReference.findUniqueEntryById(GEN_REF_TYPE, GEN_REF_ID1, GEN_REF_ID2, GEN_REF_ID3);&#xA;&#xA;        if (generalReference != null) {&#xA;            final int xpsPort = 13002;&#xA;            String xpsIP = null;&#xA;            String facilityId = null;&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;&#xA;            if (facility != null) {&#xA;                facilityId = facility.fcyId;&#xA;                log(Level.WARN, String.format(&quot;RALForUnitRePlannedWI groovy expected fcyId as %s &quot;, facilityId));&#xA;            }&#xA;&#xA;&#xA;            if (GLNUU.equalsIgnoreCase(facilityId)) {&#xA;                xpsIP = generalReference.getRefValue1();&#xA;            }&#xA;&#xA;            if (DKAAL.equalsIgnoreCase(facilityId)) {&#xA;                xpsIP = generalReference.getRefValue2();&#xA;            }&#xA;&#xA;&#xA;            log(Level.WARN, &quot; About to call createXPSScriptAndSetEventFeedback() with xpsIP : &quot; + xpsIP + &quot; and xpsPort : &quot; + xpsPort);&#xA;&#xA;            if (unit != null &amp;&amp; xpsIP != null) {&#xA;&#xA;                createXPSScriptAndSetEventFeedback(unit, xpsIP, xpsPort);&#xA;            }&#xA;        } else {&#xA;            if (generalReference == null) {&#xA;                log(Level.WARN, &quot;Please create a Gen Ref [&quot; + GEN_REF_TYPE + &quot;]/[&quot; + GEN_REF_ID1 + &quot;]/[&quot; + GEN_REF_ID2 + &quot;]/[&quot; + GEN_REF_ID3 + &quot;]&quot;);&#xA;            } else if (StringUtils.isEmpty(generalReference.getRefValue1())) {&#xA;                log(Level.WARN, &quot;Please add the XPS Server IP to the Gen Ref Entry [&quot; + GEN_REF_TYPE + &quot;]/[&quot; + GEN_REF_ID1 + &quot;].&quot;);&#xA;            } else if (StringUtils.isEmpty(generalReference.getRefValue2())) {&#xA;                log(Level.WARN, &quot;Please add the XPS Server IP to the Gen Ref Entry [&quot; + GEN_REF_TYPE + &quot;]/[&quot; + GEN_REF_ID1 + &quot;].&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        log(Level.WARN, String.format(&quot;At end of %s at %s&quot;, getClass().getName(), ArgoUtils.timeNow()));&#xA;    }&#xA;&#xA;    /**&#xA;     * Establishes the telnet connection and executes the planned move.&#xA;     * @param inUnit&#xA;     * @param inXpsServerIP&#xA;     * @param inXpsServerPort&#xA;     */&#xA;    private void createXPSScriptAndSetEventFeedback(final Unit inUnit, final String inXpsServerIP, final int inXpsServerPort) {&#xA;&#xA;        final String unitId = inUnit.getUnitId();&#xA;        final String containerWorkQueueRequest = createContainerWorkQueueRequest(unitId);&#xA;&#xA;        log(Level.WARN, &quot;About to send request [&quot; + containerWorkQueueRequest + &quot;].&quot;);&#xA;        if (establishTelnetConnection(inXpsServerIP, inXpsServerPort)) {&#xA;            containerWorkQueueRequest = createContainerWorkQueueRequest(unitId);&#xA;            final String scriptResponse = writeStringToTelnet(containerWorkQueueRequest);&#xA;&#xA;            log(Level.WARN, &quot;Sent request [&quot; + containerWorkQueueRequest + &quot;].&quot;);&#xA;            log(Level.WARN, &quot;Received reply [&quot; + scriptResponse + &quot;].&quot;);&#xA;            // If the request was executed successfully, tell the user so!&#xA;            if (isRequestSuccessful(containerWorkQueueRequest, scriptResponse)) {&#xA;                log(Level.WARN,&quot;Execution was successful!&quot;);&#xA;                log(Level.WARN, &quot;\tContainer [&quot; + inUnit.getUnitId() + &quot;], FreightKind [&quot; + inUnit.getUnitFreightKind() + &quot;], &quot;);&#xA;&#xA;                String notes = &quot;Applied Custom Event by RALForUnitRePlannedWI groovy for Unit : &quot; + unitId;&#xA;                registerEventToUnit(&quot;VGM_WEIGHT_REPLAN_XPS&quot;, &quot;The custom event when xps replan the unit position using groovy&quot;, inUnit, notes);&#xA;            } else {&#xA;                final String errorMessage = getErrorFromResponse(containerWorkQueueRequest, scriptResponse);&#xA;                log(Level.WARN, &quot;Execution failed with following message:&quot;);&#xA;                log(Level.WARN, &quot;\t''&quot; + errorMessage + &quot;''&quot;);&#xA;                log(Level.WARN, &quot;\tWhen trying to replan container [&quot; + inUnit.getUnitId() + &quot;],&quot;);&#xA;            }&#xA;&#xA;            disconnectTelnetConnection();&#xA;        } else {&#xA;            final String connectionFailed = &quot;Establishing telnet connection to [&quot; + inXpsServerIP + &quot;] failed.&quot;;&#xA;            log(Level.WARN, connectionFailed);&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Gets the error message from the response. Does this by first removing the &quot;script &quot; prefix from&#xA;     * the request, and then removes all instances of this in the response message. All that is left&#xA;     * is the error response from the XPS telnet.&#xA;     * @param inContainerPlanRequest&#xA;     * @param inContainerPlanResponse&#xA;     * @return&#xA;     */&#xA;    private String getErrorFromResponse(final String inContainerPlanRequest, final String inContainerPlanResponse) {&#xA;        String errorMessage = &quot;&quot;;&#xA;&#xA;        if (!StringUtils.isEmpty(inContainerPlanRequest) &amp;&amp; !StringUtils.isEmpty(inContainerPlanResponse)) {&#xA;            String requestWithoutPrefix = inContainerPlanRequest.replace(&quot;script&quot;, &quot;&quot;).trim();&#xA;            errorMessage = inContainerPlanResponse.replace(requestWithoutPrefix, &quot;&quot;).trim();&#xA;        }&#xA;        return errorMessage;&#xA;    }&#xA;&#xA;    /**&#xA;     * Determines whether the request was successful by comparing the request to the response.&#xA;     * If they are the same (without the &quot;script &quot; prefix of the request), count it as successful.&#xA;     * @param inContainerPlanRequest&#xA;     * @param inContainerPlanResponse&#xA;     * @return&#xA;     */&#xA;    private boolean isRequestSuccessful(final String inContainerPlanRequest, final String inContainerPlanResponse) {&#xA;        boolean isSuccessful = false;&#xA;&#xA;        if (!StringUtils.isEmpty(inContainerPlanRequest) &amp;&amp; !StringUtils.isEmpty(inContainerPlanResponse)) {&#xA;            String requestWithoutPrefix = inContainerPlanRequest.replace(&quot;script&quot;, &quot;&quot;).trim();&#xA;            String responseTrimmed = inContainerPlanResponse.trim();&#xA;&#xA;            if (StringUtils.equals(requestWithoutPrefix, responseTrimmed)) {&#xA;                isSuccessful = true;&#xA;            }&#xA;        }&#xA;&#xA;        return isSuccessful;&#xA;    }&#xA;&#xA;    /**&#xA;     * Closes the telnet session, and set the input/output stream to null&#xA;     * @return&#xA;     */&#xA;    private void disconnectTelnetConnection() {&#xA;&#xA;        _inputStream.close();&#xA;        _outputStream.close();&#xA;        _telnetClient.disconnect();&#xA;        _inputStream = null;&#xA;        _outputStream = null;&#xA;    }&#xA;&#xA;    /**&#xA;     * Creates the XPS ContainerPlan request which is sent to telnet. Plans the given container to&#xA;     * the destination slot.&#xA;     * @param inContainerNumber&#xA;     * @param destinationSlot&#xA;     * @return&#xA;     */&#xA;    private String createContainerWorkQueueRequest(final String inContainerNumber) {&#xA;        // ContainerPlan(GSTU2349823, Y, , , , Assign_Chase_Che)&#xA;        return &quot;script #ContainerPlan(&quot; + inContainerNumber + &quot;,Y, , , , Assign_Chase_Che)&quot;;&#xA;    }&#xA;&#xA;    /**&#xA;     * Writes the given argument string to the telnet session, and then calls readTelnetReply() to&#xA;     * read the response.&#xA;     * @param inContainerPlanRequest&#xA;     * @return&#xA;     */&#xA;    private String writeStringToTelnet(final String inContainerPlanRequest) {&#xA;&#xA;        _outputStream.println(inContainerPlanRequest);&#xA;        _outputStream.flush();&#xA;        return readTelnetReply();&#xA;    }&#xA;&#xA;    /**&#xA;     * Reads input from the telnet session. Appends each line of input to a String with a space between.&#xA;     * Stops reading when the telnet command prompts is found. Returns the output minus the command line prompt.&#xA;     * @param inputStream&#xA;     * @param xpsCommandLinePrompt&#xA;     * @return&#xA;     */&#xA;    private String readTelnetReply() {&#xA;&#xA;        final StringBuilder telnetReply = new StringBuilder();&#xA;        while (_inputStream.hasNext()) {&#xA;            final String currentLine = _inputStream.next();&#xA;&#xA;            // Need to put this in here to prevent infinite looping&#xA;            if (currentLine.equals(_xpsCommandLinePrompt)) {&#xA;                break;&#xA;            }&#xA;&#xA;            telnetReply.append(currentLine + &quot; &quot;);&#xA;        }&#xA;        return telnetReply.toString();&#xA;    }&#xA;&#xA;    /**&#xA;     * Sets up the telnet connection to the server running on the given IP.&#xA;     * Returns true if the first line of input is the xps command prompt running.&#xA;     * @param inXpsServerIP&#xA;     * @return&#xA;     */&#xA;    private boolean establishTelnetConnection(final String inXpsServerIP, final int inXpsServerPort) {&#xA;        boolean setupSuccessful = false;&#xA;&#xA;        if (!StringUtils.isEmpty(inXpsServerIP)) {&#xA;&#xA;            // 3.1 XPS telnet reply&#xA;            _xpsCommandLinePrompt = &quot;xps@&quot; + inXpsServerIP + &quot;:&quot; + inXpsServerPort + &quot;&gt;&quot;;&#xA;&#xA;            // Make the connection and setup the input/output streams&#xA;            _telnetClient = new TelnetClient();&#xA;            try {&#xA;                _telnetClient.connect(inXpsServerIP, inXpsServerPort);&#xA;                _inputStream = new Scanner(_telnetClient.getInputStream());&#xA;                _outputStream = new PrintWriter(_telnetClient.getOutputStream());&#xA;&#xA;                // Get the first line of input. This should be the xps command prompt.&#xA;                // If it is, return true, else return false.&#xA;                final String welcomeLine = _inputStream.next();&#xA;                log(Level.WARN, &quot;Comparing expected telnet reply [&quot; + _xpsCommandLinePrompt + &quot;] with actual telnet reply [&quot; + welcomeLine + &quot;].&quot;);&#xA;                setupSuccessful = !StringUtils.isEmpty(welcomeLine) &amp;&amp; welcomeLine.equals(_xpsCommandLinePrompt);&#xA;            } catch (ConnectException exception) {&#xA;                log(Level.WARN, &quot;Unable to establish connection to XPS Server [&quot; + inXpsServerIP + &quot;:&quot; + inXpsServerPort + &quot;].&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        return setupSuccessful;&#xA;    }&#xA;&#xA;    private void registerEventToUnit(String inEventName, String inEventDesc, Unit inUnit, String inNotes) {&#xA;        EventType eventType = EventType.findOrCreateEventType(inEventName, inEventDesc, LogicalEntityEnum.UNIT, null);&#xA;        FieldChanges evntFcs = new FieldChanges();&#xA;        recordEvent(inUnit, eventType, evntFcs, &quot;Event added to the Unit &quot; + inUnit.unitId + &quot; and &quot; + inNotes);&#xA;    }&#xA;&#xA;    /**&#xA;     * Helper method to record event.&#xA;     *&#xA;     * @param inEntity Serviceable entity&#xA;     * @param inEventType IEventType (EventEnum) describing the event to record&#xA;     * @param inUpdatedFields field changes updated&#xA;     * @param inEventNote event notes&#xA;     * @return the event that was created&#xA;     */&#xA;    public IEvent recordEvent(Serviceable inEntity, IEventType inEventType, FieldChanges inUpdatedFields, String inEventNote) {&#xA;        ServicesManager srvcMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;        IEvent evnt = null;&#xA;        try {&#xA;            evnt = srvcMgr.recordEvent(inEventType, inEventNote, null, null, inEntity, inUpdatedFields);&#xA;        } catch (BizViolation e) {&#xA;            log(Level.WARN, &quot;RALForUnitRePlannedWI recordEvent found :&quot; + e);&#xA;        }&#xA;        return evnt;&#xA;    }&#xA;&#xA;    // This is used to prevent an issue where this command line is reprinted after a command is run,&#xA;    // but it blocks reading from the inputStream unless this line is explicitly ignored&#xA;    private String _xpsCommandLinePrompt;&#xA;&#xA;    // These are used to read/write the telnet session&#xA;    private TelnetClient _telnetClient;&#xA;    private Scanner _inputStream;&#xA;    private PrintWriter _outputStream;&#xA;&#xA;    // General Reference entry identifier&#xA;    private final static String GEN_REF_TYPE = &quot;RAL_CONF&quot;;&#xA;    private final static String GEN_REF_ID1 = &quot;VGM_REPLAN_UNIT&quot;;&#xA;    private final static String GEN_REF_ID2 = &quot;GLNUU&quot;;&#xA;    private final static String GEN_REF_ID3 = &quot;DKAAL&quot;;&#xA;    private final static String SRV_VGM_WEIGHT = &quot;SRV_VGM_WEIGHT&quot;;&#xA;    private final static String GLNUU = &quot;GLNUU&quot;;&#xA;    private final static String DKAAL = &quot;DKAAL&quot;;&#xA;}&#xA;" />
<extension name="RALGetContainerPositionAndDamageDetails" scope="RAL/RAL" type="WS_ARGO_CUSTOM_HANDLER" language="GROOVY" is-enabled="Y" description="This groovy API provides container details as in SFDC 00186100" contents="/*&#xA; * $Id: RALGetContainerPositionAndDamageDetails.groovy 270219 2018-06-04 10:17:18Z selvamu $&#xA; * Copyright (c) 2018 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ral&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.ArgoWebserviceLogEntry&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.webservice.ArgoGenericWebServicesHelper&#xA;import com.navis.external.argo.AbstractArgoCustomWSHandler&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.LogUtils&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.atoms.EqDamageSeverityEnum&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import org.apache.log4j.Level&#xA;import org.jdom.Element&#xA;import org.jdom.output.XMLOutputter&#xA;&#xA;/**&#xA; * @author &lt;a href=&quot;mailto:mugunthan.selvaraj@navis.com&quot;&gt;Mugunthan Selvaraj&lt;/a&gt;&#xA; *&#xA; * Date: 01-05-2018&#xA; * JIRA: CSDV-5145&#xA; * SFDC: 00186100&#xA; *&#xA; * Description: Royal Arctic Line - API for getting Container's position and damage severity by giving facility and active container id&#xA; *&#xA; * ==============Sample Request==============&#xA; * (To test from N4 -&gt; Argoservice tester, just use the XML content inside the CDATA starting with 'custom' tag)&#xA; &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:arg=&quot;http://www.navis.com/services/argoservice&quot; xmlns:v1=&quot;http://types.webservice.argo.navis.com/v1.0&quot;&gt;&#xA; &lt;soapenv:Header/&gt;&#xA; &lt;soapenv:Body&gt;&#xA; &lt;arg:genericInvoke&gt;&#xA; &lt;arg:scopeCoordinateIdsWsType&gt;&#xA; &lt;!--Optional:--&gt;&#xA; &lt;v1:operatorId&gt;?&lt;/v1:operatorId&gt;&#xA; &lt;!--Optional:--&gt;&#xA; &lt;v1:complexId&gt;?&lt;/v1:complexId&gt;&#xA; &lt;!--Optional:--&gt;&#xA; &lt;v1:facilityId&gt;?&lt;/v1:facilityId&gt;&#xA; &lt;!--Optional:--&gt;&#xA; &lt;v1:yardId&gt;?&lt;/v1:yardId&gt;&#xA; &lt;!--Optional:--&gt;&#xA; &lt;v1:externalUserId&gt;?&lt;/v1:externalUserId&gt;&#xA; &lt;/arg:scopeCoordinateIdsWsType&gt;&#xA; &lt;arg:xmlDoc&gt;&#xA; &lt;![CDATA[&#xA; &lt;custom class=&quot;RALGetContainerPositionAndDamageDetails&quot; type=&quot;extension&quot;&gt;&#xA; &lt;parameters&gt;&#xA; &lt;facility id=&quot;DKAAL&quot; /&gt; &lt;!-- Facility Id--&gt;&#xA; &lt;containers&gt;&lt;!-- list of container id--&gt;&#xA; &lt;container&gt;HASU4668081&lt;/container&gt;&#xA; &lt;container&gt;FCIU8084029&lt;/container&gt;&#xA; &lt;container&gt;DFSU2782108&lt;/container&gt;&#xA; &lt;/containers&gt;&#xA; &lt;/parameters&gt;&#xA; &lt;/custom&gt;&#xA; ]]&gt;&#xA; &lt;/arg:xmlDoc&gt;&#xA; &lt;/arg:genericInvoke&gt;&#xA; &lt;/soapenv:Body&gt;&#xA; &lt;/soapenv:Envelope&gt;&#xA; *&#xA; * ==============Sample Response==============&#xA; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA; &lt;argo-response status=&quot;0&quot; status-id=&quot;OK&quot;&gt;&#xA; &lt;argo:custom-response xmlns:argo=&quot;http://www.navis.com/argo&quot;&gt;&#xA; &lt;response&gt;&#xA; &lt;facility id=&quot;DKAAL&quot; /&gt;&#xA; &lt;containers&gt;&#xA; &lt;container&gt;&#xA; &lt;status&gt;OK&lt;/status&gt;&#xA; &lt;message&gt;INFO&lt;/message&gt;&#xA; &lt;unitId&gt;HASU4668081&lt;/unitId&gt;&#xA; &lt;position&gt;Y-DKAAL-A1512F1&lt;/position&gt;&#xA; &lt;damage&gt;MAJOR&lt;/damage&gt;&#xA; &lt;/container&gt;&#xA; &lt;container&gt;&#xA; &lt;status&gt;OK&lt;/status&gt;&#xA; &lt;message&gt;INFO&lt;/message&gt;&#xA; &lt;unitId&gt;FCIU8084029&lt;/unitId&gt;&#xA; &lt;position&gt;V-CQN719W-381882&lt;/position&gt;&#xA; &lt;/container&gt;&#xA; &lt;container&gt;&#xA; &lt;status&gt;ERROR&lt;/status&gt;&#xA; &lt;message&gt;Unit/Active Record not found&lt;/message&gt;&#xA; &lt;unitId&gt;DFSU2782108&lt;/unitId&gt;&#xA; &lt;/container&gt;&#xA; &lt;/containers&gt;&#xA; &lt;/response&gt;&#xA; &lt;/argo:custom-response&gt;&#xA; &lt;/argo-response&gt;&#xA; *&#xA; *  ==============Configuration==============&#xA; * Go to N4 =&gt; Code extension and configure the groovy with type 'WS_ARGO_CUSTOM_HANDLER'&#xA; *&#xA; * S.no   Modified Date      Modified By          Jira Id    SFDC      Change Description&#xA; * 1      04 Jun 2018        Mugunthan            CSDV-5145  00186100  Warning message for container not found in yard.&#xA; * 2&#x9;  09-04-2021&#x9;&#x9; Pravin Kumar&#x9;      CSDV-6733  00225488  Groovy migration from N4 3.5.15 to N4 3.8.13.1 version&#xA;&#xA; */&#xA;class RALGetContainerPositionAndDamageDetails extends AbstractArgoCustomWSHandler {&#xA;    @Override&#xA;    void execute(UserContext inUserContext, MessageCollector inOutMessageCollector, Element inECustom, Element inOutEResponse, Long inWslogGkey) {&#xA;        LogUtils.setLogLevel(RALGetContainerPositionAndDamageDetails.class, Level.INFO);&#xA;        log(Level.INFO, &quot;Entering custom groovy for Container details&quot;)&#xA;        log(Level.INFO, &quot;Incoming XML request as String: ${printXMLToString(inECustom)}&quot;);&#xA;&#xA;        try {&#xA;            Element parameterElement = inECustom.getChild(PARAMETERS)&#xA;            if (parameterElement != null) {&#xA;                Element facilityElement = parameterElement.getChild(FACILITY)&#xA;                String facilityId = facilityElement?.getAttribute(ID)?.getValue()&#xA;                if (facilityId == null) {&#xA;                    throw BizFailure.create(&quot;Facility cannot be null&quot;)&#xA;                }&#xA;&#xA;                Facility facility = Facility.findFacility(facilityId)&#xA;                if (facility == null) {&#xA;                    throw BizFailure.create(&quot;Could not able to find a facility with id $facilityId&quot;)&#xA;                }&#xA;&#xA;                Element containersElement = parameterElement.getChild(CONTAINERS)&#xA;                if (containersElement) {&#xA;                    List&lt;Element&gt; containerElements = containersElement.getChildren(CONTAINER)&#xA;                    if (containerElements.size() &gt; 0) {&#xA;                        inOutEResponse.addContent(constructAndReturnResponse(containerElements, facility))&#xA;                    } else {&#xA;                        inOutEResponse.addContent(&quot;No Containers to process&quot;)&#xA;                    }&#xA;                } else {&#xA;                    throw BizFailure.create(&quot;Containers element is missing&quot;)&#xA;                }&#xA;            } else {&#xA;                throw BizFailure.create(&quot;Invalid root tag in the XML request&quot;)&#xA;            }&#xA;        } catch (BizViolation | BizFailure e) {&#xA;            inOutMessageCollector.registerExceptions(e)&#xA;        } catch (Exception e) {&#xA;            inOutMessageCollector.registerExceptions(e)&#xA;        }&#xA;        //Audit in Web Service logs -only when the settings is OFF&#xA;        //    if (!ArgoConfig.WS_LOG_CUSTOM.isOn(ContextHelper.getThreadUserContext())) {&#xA;        createWebServiceEventLog(printXMLToString(inECustom), printXMLToString(inOutEResponse), inOutMessageCollector)&#xA;        //   }&#xA;&#xA;        log(Level.INFO, &quot;Exiting custom groovy for Container details&quot;)&#xA;    }&#xA;&#xA;    /**&#xA;     * This method constructs the final response&#xA;     * @param inContainerElements&#xA;     * @param inFacility&#xA;     * @return&#xA;     */&#xA;    private Element constructAndReturnResponse(List&lt;Element&gt; inContainerElements, Facility inFacility) {&#xA;        Element responseElement = new Element(RESPONSE)&#xA;        Element facilityElement = new Element(FACILITY)&#xA;        facilityElement.setAttribute(ID, inFacility.getFcyId())&#xA;        responseElement.addContent(facilityElement)&#xA;        Element containersElement = new Element(CONTAINERS)&#xA;        for (Element containerElement : inContainerElements) {&#xA;            String containerId = containerElement.getText()?.trim()&#xA;            containersElement.addContent(retrieveAndCreateContainerDetails(containerId, inFacility))&#xA;        }&#xA;        responseElement.addContent(containersElement)&#xA;        return responseElement&#xA;    }&#xA;&#xA;    /**&#xA;     * Method to retrieve unit details and construct unit detail XML element&#xA;     * @param inContainerId&#xA;     * @param inFacility&#xA;     * @return&#xA;     */&#xA;    private Element retrieveAndCreateContainerDetails(String inContainerId, Facility inFacility) {&#xA;        if (inContainerId == null) {&#xA;            throw BizFailure.create(&quot;Container id cannot be null&quot;)&#xA;        }&#xA;&#xA;        Equipment equipment = Equipment.findEquipment(inContainerId)&#xA;        if (equipment == null) {&#xA;            return createUnitElementForNotFound(inContainerId, null)&#xA;        }&#xA;&#xA;        UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;        UnitFacilityVisit ufv = unitFinder.findLiveUfvByEquipment(inFacility, equipment)&#xA;        if (ufv == null) {&#xA;            log(Level.INFO, &quot;Counld not load UFV for unit id: $inContainerId&quot;)&#xA;            return createUnitElementForNotFound(inContainerId, null)&#xA;        }&#xA;&#xA;        return createUnitElement(ufv)&#xA;    }&#xA;&#xA;    /**&#xA;     * Method to create unit detail elements for success scenario&#xA;     * @param inUfv&#xA;     * @return&#xA;     */&#xA;    private Element createUnitElement(UnitFacilityVisit inUfv) {&#xA;&#xA;        Element containerElement = new Element(CONTAINER)&#xA;&#xA;        boolean inYard = inUfv.getUfvTransitState().equals(UfvTransitStateEnum.S40_YARD)&#xA;&#xA;        Element statusElement = new Element(STATUS)&#xA;        inYard ? statusElement.setText(STATUS_OK) : statusElement.setText(STATUS_WARN)&#xA;        containerElement.addContent(statusElement)&#xA;&#xA;        Element messageElement = new Element(MESSAGE)&#xA;        inYard ? messageElement.setText(INFO) :&#xA;                messageElement.setText(String.format(WARNING_MESSAGE, inUfv.getUfvUnit().getUnitId(), inUfv.getUfvTransitState().getKey()))&#xA;        containerElement.addContent(messageElement)&#xA;&#xA;        Element unitElement = new Element(UNIT_ID)&#xA;        unitElement.setText(inUfv.getUfvUnit().getUnitId())&#xA;        containerElement.addContent(unitElement)&#xA;&#xA;        Element positionElement = new Element(POSITION)&#xA;        LocPosition position = inUfv.getUfvLastKnownPosition()&#xA;        if (position != null) {&#xA;            positionElement.setText(position.toString())&#xA;            containerElement.addContent(positionElement)&#xA;        } else {&#xA;            return createUnitElementForNotFound(inUfv.getUfvUnit().getUnitId(), UNIT_POSITION_NOT_FOUND)&#xA;        }&#xA;&#xA;        EqDamageSeverityEnum damage = inUfv.getUfvUnit().getUeDamageSeverity()&#xA;&#xA;        if (damage != null &amp;&amp; (damage.equals(EqDamageSeverityEnum.MAJOR) || damage.equals(EqDamageSeverityEnum.MINOR))) {&#xA;            Element damageElement = new Element(DAMAGE)&#xA;            damageElement.setText(damage.getKey())&#xA;            containerElement.addContent(damageElement)&#xA;        }&#xA;        return containerElement&#xA;    }&#xA;&#xA;    /**&#xA;     * Method to create Error element when container not found&#xA;     * @param inContainerId&#xA;     * @param inErrorMessage&#xA;     * @return&#xA;     */&#xA;    private Element createUnitElementForNotFound(String inContainerId, String inErrorMessage) {&#xA;        Element containerElement = new Element(CONTAINER)&#xA;&#xA;        Element statusElement = new Element(STATUS)&#xA;        statusElement.setText(STATUS_ERROR)&#xA;        containerElement.addContent(statusElement)&#xA;&#xA;        Element messageElement = new Element(MESSAGE)&#xA;        if (inErrorMessage == null) {&#xA;            messageElement.setText(UNIT_NOT_FOUND_MSG)&#xA;        } else {&#xA;            messageElement.setText(inErrorMessage)&#xA;        }&#xA;        containerElement.addContent(messageElement)&#xA;&#xA;        Element unitElement = new Element(UNIT_ID)&#xA;        unitElement.setText(inContainerId)&#xA;        containerElement.addContent(unitElement)&#xA;&#xA;        return containerElement&#xA;    }&#xA;&#xA;    /**&#xA;     * Helper method to create string from XML Element node&#xA;     * @param inNode&#xA;     * @return&#xA;     */&#xA;    private static String printXMLToString(Element inNode) {&#xA;        if (inNode) {&#xA;            XMLOutputter outp = new XMLOutputter();&#xA;            String result = outp.outputString(inNode);&#xA;            return result;&#xA;        }&#xA;    }&#xA;/**&#xA; * Create entry for incoming request and outgoing response&#xA; * @param inRequest&#xA; * @param inResponse&#xA; */&#xA;    private void createWebServiceEventLog(String inRequest, String inResponse, MessageCollector inMsgConllector) {&#xA;        ArgoGenericWebServicesHelper argoWSHelper =&#xA;                (ArgoGenericWebServicesHelper) PortalApplicationContext.getBean(ArgoGenericWebServicesHelper.BEAN_ID);&#xA;        ArgoWebserviceLogEntry logEntry = ArgoWebserviceLogEntry.&#xA;                create(CALL_TYPE, createScopeString(), INBOUND, UNIT_DETAILS, false, inRequest);&#xA;        logEntry.setResponse(inResponse, inMsgConllector)&#xA;        if (!(inMsgConllector.getMessages().size() &gt; 0)) {&#xA;            logEntry.setFieldValue(ArgoField.WSLOG_STATUS_ID, STATUS_OK)&#xA;        }&#xA;    }&#xA;&#xA;    private static String createScopeString() {&#xA;        final String operator = ContextHelper.getThreadOperator()?.getOprId();&#xA;        final String complex = ContextHelper.getThreadComplex()?.getCpxId();&#xA;        final String facility = ContextHelper.getThreadFacility()?.getFcyId();&#xA;        final String yard = ContextHelper.getThreadYard()?.getYrdId();&#xA;        final String scopeID = new StringBuilder().append(operator == null ? EMPTY : operator).append(PATH).append(complex == null ? EMPTY : complex).&#xA;                append(PATH).append(facility == null ? EMPTY : facility).append(PATH).&#xA;                append(yard == null ? EMPTY : yard);&#xA;        return scopeID&#xA;    }&#xA;&#xA;    private static final String PARAMETERS = &quot;parameters&quot;;&#xA;    private static final String FACILITY = &quot;facility&quot;;&#xA;    private static final String CONTAINERS = &quot;containers&quot;;&#xA;    private static final String CONTAINER = &quot;container&quot;;&#xA;    private static final String STATUS = &quot;status&quot;;&#xA;    private static final String MESSAGE = &quot;message&quot;;&#xA;    private static final String UNIT_ID = &quot;unitId&quot;;&#xA;    private static final String DAMAGE = &quot;damage&quot;;&#xA;    private static final String ID = &quot;id&quot;;&#xA;    private static final String RESPONSE = &quot;response&quot;;&#xA;    private static final String STATUS_ERROR = &quot;ERROR&quot;;&#xA;    private static final String STATUS_OK = &quot;OK&quot;;&#xA;    private static final String UNIT_NOT_FOUND_MSG = &quot;Unit/Active Record not found&quot;;&#xA;    private static final String INFO = &quot;INFO&quot;;&#xA;    private static final String STATUS_WARN = &quot;WARN&quot;;&#xA;    private static final String POSITION = &quot;position&quot;;&#xA;    private static final String WARNING_MESSAGE = &quot;Unit %s not in yard. Unit T state is %s &quot;;&#xA;    private static final String UNIT_POSITION_NOT_FOUND = &quot;Unit is not in yard/vessel. No valid bin position found&quot;;&#xA;&#xA;    private static final char PATH = '/';&#xA;    private static final String EMPTY = &quot;&quot;;&#xA;&#xA;    //Web service log fields&#xA;    private static final String CALL_TYPE = &quot;RAL/Navis N4&quot;;&#xA;    private static final String INBOUND = &quot;RAL=&gt;N4&quot;;&#xA;    private static final String UNIT_DETAILS = &quot;Container details&quot;;&#xA;}&#xA;" />
<extension name="SnxArgoGroovyJobDefinitionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoAssetsEntity&#xA;import com.navis.argo.ArgoAssetsField&#xA;import com.navis.argo.ArgoJobEntity&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.business.atoms.JobFrequencyEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.atoms.WeekdayEnum&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.argo.web.ArgoGuiMetafield&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.QuartzEntity&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.query.common.api.QueryResult&#xA;import com.navis.framework.util.ValueHolder&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.security.SecurityEntity&#xA;import com.navis.security.SecurityField&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;&#xA;/**&#xA; * SNX Exporter for the Groovy Job.&#xA; */&#xA;public class SnxArgoGroovyJobDefinitionExporter extends AbstractScopeAwareSnxExporter implements EBean {&#xA;&#xA;    SnxArgoGroovyJobDefinitionExporter() {&#xA;        super(null, null);&#xA;    }&#xA;&#xA;    protected SnxArgoGroovyJobDefinitionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace)&#xA;    }&#xA;&#xA;    @Override&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoJobEntity.ARGO_GROOVY_JOB_DEFINITION)&#xA;                .addDqField(ArgoJobField.JOBDEF_ID)&#xA;                .addDqField(ArgoJobField.JOBDEF_DESCRIPTION)&#xA;                .addDqField(ArgoJobField.JOBDEF_IS_CLUSTERED)&#xA;                .addDqField(ArgoJobField.JOBDEF_JOB_GROUP)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_SCOPE)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_CODE_TYPE)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_GROOVY_PLUGINS)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_CODE_EXTENSIONS)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_BASE_USER)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_FREQUENCY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_WEEKDAYS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_LIFE_START_DATE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_LIFE_END_DATE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_EXPRESSION)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_HOURS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MINUTES)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_COUNT)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;        return dq;&#xA;    }&#xA;&#xA;    @Override&#xA;    protected Element createOneEntityElement() {&#xA;        Element element = createElement(ArgoJobEntity.ARGO_GROOVY_JOB_DEFINITION);&#xA;&#xA;        Serializable userGkey = (Serializable) getProperty(ArgoGuiMetafield.GRVJOB_BASE_USER);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(SecurityEntity.BASE_USER)&#xA;                .addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_GKEY, userGkey))&#xA;                .addDqField(SecurityField.BUSER_UID);&#xA;        QueryResult result = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;        ValueHolder valueHolder = result.getValueHolder(result.getFirstResult());&#xA;        String userId = valueHolder != null ? valueHolder.getFieldValue(SecurityField.BUSER_UID) : null;&#xA;&#xA;        setAttributeFromField(element, ArgoJobField.JOBDEF_ID.getFieldId(), ArgoJobField.JOBDEF_ID);&#xA;        setAttributeFromField(element, ArgoJobField.JOBDEF_DESCRIPTION.getFieldId(), ArgoJobField.JOBDEF_DESCRIPTION);&#xA;        Serializable jogGroupGkey = (Serializable) getProperty(ArgoJobField.JOBDEF_JOB_GROUP);&#xA;        dq = QueryUtils.createDomainQuery(QuartzEntity.JOB_GROUP)&#xA;                .addDqPredicate(PredicateFactory.eq(QuartzField.JOBGROUP_GKEY, jogGroupGkey))&#xA;                .addDqField(QuartzField.JOBGROUP_NAME);&#xA;        result = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;        valueHolder = result.getValueHolder(result.getFirstResult());&#xA;        String jobGroupName = valueHolder != null ? valueHolder.getFieldValue(QuartzField.JOBGROUP_NAME) : null;&#xA;        setAttribute(element, ArgoJobField.JOBDEF_JOB_GROUP.getFieldId(), jobGroupName);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.GRVJOB_CODE_TYPE.getFieldId(), ArgoGuiMetafield.GRVJOB_CODE_TYPE);&#xA;        setAttribute(element, ArgoGuiMetafield.GRVJOB_BASE_USER.getFieldId(), userId);&#xA;        JobFrequencyEnum frequency = (JobFrequencyEnum) getProperty(ArgoGuiMetafield.JOBDEF_FREQUENCY);&#xA;        setAttribute(element,ArgoGuiMetafield.JOBDEF_FREQUENCY.getFieldId(), frequency)&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE.getFieldId(), ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH.getFieldId(),&#xA;                ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH.getFieldId(), ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY.getFieldId(), ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE.getFieldId(), ArgoGuiMetafield.JOBDEF_LIFE_START_DATE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE.getFieldId(), ArgoGuiMetafield.JOBDEF_LIFE_END_DATE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_EXPRESSION.getFieldId(), ArgoGuiMetafield.JOBDEF_EXPRESSION);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_HOURS.getFieldId(), ArgoGuiMetafield.JOBDEF_HOURS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MINUTES.getFieldId(), ArgoGuiMetafield.JOBDEF_MINUTES);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_COUNT);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS.getFieldId(), ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX.getFieldId(), ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;&#xA;        String scopeGkey = (String) getProperty(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY);&#xA;        Long gkey = null;&#xA;        if (scopeGkey != null) {&#xA;            gkey = Long.parseLong(scopeGkey);&#xA;        }  &#xA;        ScopeEnum scopeLevel = (ScopeEnum) getProperty(ArgoGuiMetafield.GRVJOB_SCOPE);&#xA;        setOptionalAttribute(element, A_SCOPE, getScopePathName(gkey, scopeLevel));&#xA;&#xA;        appendWeekdaysElement(element);&#xA;        appendDaysOfMonthElement(element);&#xA;        appendCodeExtensionsElement(element);&#xA;        appendGroovyPluginsElement(element);&#xA;        return element&#xA;    }&#xA;&#xA;    private void appendWeekdaysElement(Element inGroovyJobElement) {&#xA;        List&lt;WeekdayEnum&gt; weekdays = (List&lt;WeekdayEnum&gt;) getProperty(ArgoGuiMetafield.JOBDEF_WEEKDAYS);&#xA;        Element weekdaysElement = createElement(E_WEEKDAYS);&#xA;&#xA;        if (weekdays != null) {&#xA;            for (WeekdayEnum weekdayEnum : weekdays) {&#xA;                Element element = createElement(E_WEEKDAY);&#xA;                element.setAttribute(A_NAME, weekdayEnum.getName());&#xA;                weekdaysElement.addContent(element);&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(weekdaysElement);&#xA;    }&#xA;&#xA;    private void appendDaysOfMonthElement(Element inGroovyJobElement) {&#xA;        List&lt;String&gt; daysOfMonth = (List&lt;String&gt;) getProperty(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH);&#xA;        Element daysOfMonthElement = createElement(E_DAYS_OF_MONTH);&#xA;&#xA;        if (daysOfMonth != null) {&#xA;            for (String day : daysOfMonth) {&#xA;                Element element = createElement(E_DAY);&#xA;                element.setAttribute(A_NAME, day);&#xA;                daysOfMonthElement.addContent(element);&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(daysOfMonthElement);&#xA;    }&#xA;&#xA;    private void appendCodeExtensionsElement(Element inGroovyJobElement) {&#xA;        Serializable[] codeExtensions = (Serializable[]) getProperty(ArgoGuiMetafield.GRVJOB_CODE_EXTENSIONS);&#xA;        Element codeExtensionsElement = createElement(E_CODE_EXTENSIONS);&#xA;&#xA;        if (codeExtensions != null) {&#xA;            for (int i=0; i&lt; codeExtensions.length; i++) {&#xA;                Serializable gkey = codeExtensions[i];&#xA;                DomainQuery dq = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                        .addDqPredicate(PredicateFactory.eq(ExtensionField.EXT_GKEY, gkey));&#xA;                dq.addDqField(ExtensionField.EXT_NAME);&#xA;                dq.setScopingEnabled(true);&#xA;                QueryResult queryResult = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;                List&lt;ValueObject&gt; results = queryResult.getRetrievedResults();&#xA;                if (results.size() == 1) {&#xA;                    ValueObject valueObject = results.first();&#xA;                    String name = valueObject.getFieldValue(ExtensionField.EXT_NAME);&#xA;                    Element element = createElement(E_CODE_EXTENSION);&#xA;                    element.setAttribute(A_NAME, name);&#xA;                    codeExtensionsElement.addContent(element);&#xA;                }&#xA;            }&#xA;        }&#xA;        inGroovyJobElement.addContent(codeExtensionsElement);&#xA;    }&#xA;&#xA;    private void appendGroovyPluginsElement(Element inGroovyJobElement) {&#xA;        Serializable[] groovyPlugins = (Serializable[]) getProperty(ArgoGuiMetafield.GRVJOB_GROOVY_PLUGINS);&#xA;        Element groovyPluginsElement = createElement(E_GROOVY_PLUGINS);&#xA;&#xA;        if (groovyPlugins != null) {&#xA;            for (int i=0; i&lt; groovyPlugins.length; i++) {&#xA;                Serializable gkey = groovyPlugins[i];&#xA;                DomainQuery dq = QueryUtils.createDomainQuery(ArgoAssetsEntity.DIGITAL_ASSET)&#xA;                        .addDqPredicate(PredicateFactory.eq(ArgoAssetsField.DA_GKEY, gkey));&#xA;                dq.addDqField(ArgoAssetsField.DA_ID);&#xA;                QueryResult queryResult = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;                List&lt;ValueObject&gt; results = queryResult.getRetrievedResults();&#xA;                if (results.size() == 1) {&#xA;                    ValueObject valueObject = results.first();&#xA;                    String name = valueObject.getFieldValue(ArgoAssetsField.DA_ID);&#xA;                    Element element = createElement(E_GROOVY_PLUGIN);&#xA;                    element.setAttribute(A_ID, name);&#xA;                    groovyPluginsElement.addContent(element);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(groovyPluginsElement);&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Exporter for Argo Groovy Job Definition&quot;;&#xA;    }&#xA;&#xA;    private static String E_WEEKDAYS = &quot;weekdays&quot;;&#xA;    private static String E_WEEKDAY = &quot;weekday&quot;;&#xA;&#xA;    private static String E_DAYS_OF_MONTH = &quot;daysOfMonth&quot;;&#xA;    private static String E_DAY = &quot;day&quot;;&#xA;&#xA;    private static String E_CODE_EXTENSIONS = &quot;codeExtensions&quot;;&#xA;    private static String E_CODE_EXTENSION = &quot;codeExtension&quot;;&#xA;&#xA;    private static String E_GROOVY_PLUGINS = &quot;groovyPlugins&quot;;&#xA;    private static String E_GROOVY_PLUGIN = &quot;groovyPlugin&quot;;&#xA;&#xA;    private static String A_NAME = &quot;name&quot;;&#xA;    private static String A_ID = &quot;id&quot;;&#xA;&#xA;    private static String A_SCOPE = &quot;scope&quot;;&#xA;}" />
<extension name="SnxArgoGroovyJobDefinitionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.business.atoms.CustomJobTypeEnum&#xA;import com.navis.argo.business.atoms.JobFrequencyEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.job.ArgoGroovyJobDefinition&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.argo.web.ArgoGuiMetafield&#xA;import com.navis.extension.business.Extension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.QuartzEntity&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.quartz.business.JobGroup&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.security.SecurityEntity&#xA;import com.navis.security.SecurityField&#xA;import com.navis.security.business.user.BaseUser&#xA;import org.jdom.Element&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;public class SnxArgoGroovyJobDefinitionImporter extends AbstractScopeAwareSnxImporter implements EBean {&#xA;    private static final Logger LOGGER = LoggerFactory.getLogger(SnxArgoGroovyJobDefinitionImporter.class);&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        String id = getRequiredAttributeStringValue(inElement, ArgoJobField.JOBDEF_ID.getFieldId());&#xA;        LOGGER.info(&quot;&gt;parseElement id={}&quot;, id);&#xA;        recordIdentifier(inElement, id);&#xA;&#xA;        ArgoGroovyJobDefinition groovyJobDefinition = (ArgoGroovyJobDefinition) ArgoGroovyJobDefinition.findById(id)&#xA;        LOGGER.info(&quot;findGroovyJobDefinition groovyJobDefiniton={}&quot;, groovyJobDefinition);&#xA;        if (groovyJobDefinition == null) {&#xA;            groovyJobDefinition = new ArgoGroovyJobDefinition();&#xA;            groovyJobDefinition.setFieldValue(ArgoJobField.JOBDEF_ID, id);&#xA;            String userId = getOptionalAttributeString(inElement, ArgoGuiMetafield.GRVJOB_BASE_USER.getFieldId(), null);&#xA;            if (userId != null) {&#xA;                BaseUser user = findBaseUser(userId);&#xA;                if (user != null) {&#xA;                    groovyJobDefinition.setFieldValue(ArgoJobField.GRVJOB_BASE_USER, user.getBuserGkey());&#xA;                }&#xA;            }&#xA;            LOGGER.info(&quot;saveGroovyJobDefinition groovyJobDefinition={}&quot;, groovyJobDefinition);&#xA;            HibernateApi.getInstance().save(groovyJobDefinition);&#xA;        }&#xA;&#xA;        setOptionalProperty(inElement, ArgoJobField.JOBDEF_DESCRIPTION.getFieldId(), groovyJobDefinition, ArgoJobField.JOBDEF_DESCRIPTION);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_EXPRESSION.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_EXPRESSION);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_HOURS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_HOURS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MINUTES.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MINUTES);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;&#xA;        FieldChanges fieldChanges = new FieldChanges()&#xA;&#xA;        String frequency = getOptionalAttributeString(inElement, ArgoJobField.JOBDEF_FREQUENCY.getFieldId(), null)&#xA;        JobFrequencyEnum frequencyEnum = JobFrequencyEnum.getEnum(frequency);&#xA;        fieldChanges.setFieldChange(ArgoJobField.JOBDEF_FREQUENCY, frequencyEnum);&#xA;&#xA;        String jobGroupName = getOptionalAttributeString(inElement, ArgoJobField.JOBDEF_JOB_GROUP.getFieldId(), null);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(QuartzEntity.JOB_GROUP)&#xA;                .addDqPredicate(PredicateFactory.eq(QuartzField.JOBGROUP_NAME, jobGroupName));&#xA;        JobGroup jobGroup = (JobGroup) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;&#xA;        String jobType = getOptionalAttributeString(inElement, ArgoGuiMetafield.GRVJOB_CODE_TYPE.getFieldId(), null);&#xA;        CustomJobTypeEnum jobTypeEnum = CustomJobTypeEnum.getEnum(jobType);&#xA;&#xA;        fieldChanges.setFieldChange(ArgoJobField.JOBDEF_JOB_GROUP, jobGroup);&#xA;        fieldChanges.setFieldChange(ArgoJobField.GRVJOB_CODE_TYPE, jobTypeEnum);&#xA;&#xA;        // Create a FieldChanges&#xA;&#xA;        setScope(inElement, groovyJobDefinition, fieldChanges);&#xA;&#xA;        parseWeekdaysElement(inElement, fieldChanges, groovyJobDefinition);&#xA;        parseDaysOfMonthElement(inElement, fieldChanges, groovyJobDefinition);&#xA;        parseCodeExtensionsElement(inElement, fieldChanges, groovyJobDefinition);&#xA;&#xA;        groovyJobDefinition.applyFieldChanges(fieldChanges);&#xA;    }&#xA;&#xA;    private BaseUser findBaseUser(String userId) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(SecurityEntity.BASE_USER)&#xA;                .addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_UID, userId));&#xA;        dq.setScopingEnabled(false);&#xA;        return HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private void setScope(Element inElement, ArgoGroovyJobDefinition inGroovyJobDefinition, FieldChanges inOutFieldChanges) {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap&lt;&gt;();&#xA;        String scope = getOptionalAttributeString(inElement, A_SCOPE, null);&#xA;        if (scope == null) {&#xA;            identifierMap.put(A_SCOPE, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(A_SCOPE, scope);&#xA;        }&#xA;        recordIdentifier(inElement, identifierMap);&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = getScopeInfo(scope, A_SCOPE);&#xA;        ScopeCoordinates scopeCoordinates = getScopeCoordinates(scopeInfo);&#xA;&#xA;        if (scopeCoordinates != null) {&#xA;            FieldChanges fieldChanges = new FieldChanges();&#xA;            if (scopeCoordinates.isScopeGlobal()) {&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE, ScopeEnum.GLOBAL);&#xA;            } else {&#xA;                int scopeLevel = scopeCoordinates.getMaxScopeLevel();&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE, scopeInfo.getScopeEnum());&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY, scopeCoordinates.getScopeLevelCoord(scopeLevel));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private void parseWeekdaysElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob) {&#xA;        List&lt;Element&gt; alLWeekdays = inGroovyJobElement.getChildren(E_WEEKDAYS, inGroovyJobElement.getNamespace());&#xA;        if (alLWeekdays == null || alLWeekdays.size() == 0) {&#xA;            return;&#xA;        }&#xA;        List&lt;Element&gt; weekdays = alLWeekdays.first().getChildren(E_WEEKDAY);&#xA;        if (weekdays == null || weekdays.size() == 0) {&#xA;            return;&#xA;        }&#xA;&#xA;        String[] weekdayEnums = new String[weekdays.size()];&#xA;        for (int i = 0; i &lt; weekdays.size(); i++) {&#xA;            Element weekday = weekdays.get(i);&#xA;            weekdayEnums[i] = weekday.getAttributeValue(A_NAME);&#xA;        }&#xA;&#xA;        inOutFieldChanges.setFieldChange(ArgoGuiMetafield.JOBDEF_WEEKDAYS, weekdayEnums);&#xA;    }&#xA;&#xA;    private void parseDaysOfMonthElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob) {&#xA;        List&lt;Element&gt; daysOfMonth = inGroovyJobElement.getChildren(E_DAYS_OF_MONTH, inGroovyJobElement.getNamespace());&#xA;        if (daysOfMonth == null || daysOfMonth.size() == 0) {&#xA;            return;&#xA;        }&#xA;        List&lt;Element&gt; dayElements = daysOfMonth.first().getChildren(E_DAY);&#xA;        if (dayElements == null || dayElements.size() == 0) {&#xA;            return;&#xA;        }&#xA;&#xA;        String[] days = new String[dayElements.size()];&#xA;        for (int i = 0; i &lt; dayElements.size(); i++) {&#xA;            Element weekday = dayElements.get(i);&#xA;            days[i] = weekday.getAttributeValue(A_NAME);&#xA;        }&#xA;&#xA;        inOutFieldChanges.setFieldChange(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH, days);&#xA;    }&#xA;&#xA;    private void parseCodeExtensionsElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob)&#xA;            throws BizViolation {&#xA;        List&lt;Element&gt; allCodeExtensions = inGroovyJobElement.getChildren(E_CODE_EXTENSIONS, inGroovyJobElement.getNamespace());&#xA;        Set&lt;Extension&gt; result = new HashSet();&#xA;        if (allCodeExtensions != null) {&#xA;            List&lt;Element&gt; codeExtensions = allCodeExtensions.first().getChildren(E_CODE_EXTENSION);&#xA;            for (Element extension : codeExtensions) {&#xA;                String name = getRequiredAttributeStringValue(extension, A_NAME);&#xA;                List&lt;Extension&gt; extensions = Extension.findExtensions(name);&#xA;                if (extensions == null || extensions.size() == 0) {&#xA;                    LOGGER.error(&quot;Could not find code extension with name=&quot; + name);&#xA;                } else if (extensions.size() &gt; 1) {&#xA;                    LOGGER.error(&quot;Found more then one code extension with the name=&quot; + name);&#xA;                } else {&#xA;                    result.add(extensions.first());&#xA;                }&#xA;            }&#xA;            inOutFieldChanges.setFieldChange(ArgoJobField.GRVJOB_CODE_EXTENSIONS, result);&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Importer for Argo Groovy Job Definition&quot;;&#xA;    }&#xA;&#xA;    private static String E_WEEKDAYS = &quot;weekdays&quot;;&#xA;    private static String E_WEEKDAY = &quot;weekday&quot;;&#xA;&#xA;    private static String E_DAYS_OF_MONTH = &quot;daysOfMonth&quot;;&#xA;    private static String E_DAY = &quot;day&quot;;&#xA;&#xA;    private static String E_CODE_EXTENSIONS = &quot;codeExtensions&quot;;&#xA;    private static String E_CODE_EXTENSION = &quot;codeExtension&quot;;&#xA;&#xA;    private static String E_GROOVY_PLUGINS = &quot;groovyPlugins&quot;;&#xA;    private static String E_GROOVY_PLUGIN = &quot;groovyPlugin&quot;;&#xA;&#xA;    private static String A_NAME = &quot;name&quot;;&#xA;    private static String A_ID = &quot;id&quot;;&#xA;&#xA;    private static String A_SCOPE = &quot;scope&quot;;&#xA;}" />
<extension name="SnxExtensionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.argo.business.snx.SnxExtensionBase&#xA;import com.navis.extension.invocation.dynamiccode.IExtension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.external.framework.util.ExtensionUtils&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.context.UserContextUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;/**&#xA; * Code taken from com.navis.argo.business.snx.SnxExtensionExporter;&#xA; * Added handling for extra field &quot;dependency&quot;&#xA; */&#xA;public class SnxExtensionExporter extends AbstractScopeAwareSnxExporter implements SnxExtensionBase, EBean {&#xA;&#xA;    private static final MetafieldId EXTENSIONFIELD_DEPENDENCY = MetafieldIdFactory.valueOf(&quot;extDependency&quot;);&#xA;&#xA;    private static final Logger logger = LoggerFactory.getLogger(SnxExtensionExporter.class);&#xA;&#xA;    public SnxExtensionExporter() {&#xA;        super((Map) null, (Namespace) null);&#xA;    }&#xA;&#xA;    protected SnxExtensionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace);&#xA;    }&#xA;&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery domainQuery = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                .addDqField(ExtensionField.EXT_SCOPE_LEVEL)&#xA;                .addDqField(ExtensionField.EXT_SCOPE_GKEY)&#xA;                .addDqField(ExtensionField.EXT_NAME)&#xA;                .addDqField(ExtensionField.EXT_TYPE)&#xA;                .addDqField(ExtensionField.EXT_LANG)&#xA;                .addDqField(ExtensionField.EXT_ENABLED)&#xA;                .addDqField(ExtensionField.EXT_SYS_SEEDED)&#xA;                .addDqField(ExtensionField.EXT_VERSION)&#xA;                .addDqField(ExtensionField.EXT_CONTENTS)&#xA;                .addDqField(ExtensionField.EXT_DESCRIPTION)&#xA;                .addDqField(EXTENSIONFIELD_DEPENDENCY)&#xA;                .setFullLeftOuterJoin(true);&#xA;        return domainQuery;&#xA;    }&#xA;&#xA;    protected Element createOneEntityElement() {&#xA;        Element extElement = this.createElement(&quot;extension&quot;);&#xA;        this.setAttributeFromField(extElement, &quot;name&quot;, ExtensionField.EXT_NAME);&#xA;        String scopeGkey = (String) this.getProperty(ExtensionField.EXT_SCOPE_GKEY);&#xA;        Long geky = null;&#xA;        if (scopeGkey != null) {&#xA;            geky = Long.parseLong(scopeGkey);&#xA;        }&#xA;&#xA;        Long scopeLevel = (Long) this.getProperty(ExtensionField.EXT_SCOPE_LEVEL);&#xA;        this.setOptionalAttribute(extElement, &quot;scope&quot;, this.getScopePathName(geky, scopeLevel));&#xA;        this.setOptionalAttributeFromField(extElement, &quot;type&quot;, ExtensionField.EXT_TYPE);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;language&quot;, ExtensionField.EXT_LANG);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;is-enabled&quot;, ExtensionField.EXT_ENABLED);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;description&quot;, ExtensionField.EXT_DESCRIPTION);&#xA;        //HHLA customization&#xA;        this.setOptionalAttribute(extElement, &quot;dependency&quot;, getCodeExtensionNameFromGkey());&#xA;&#xA;        this.setOptionalAttributeFromField(extElement, &quot;contents&quot;, ExtensionField.EXT_CONTENTS);&#xA;&#xA;        byte[] contents = (byte[]) ((byte[]) this.getProperty(ExtensionField.EXT_CONTENTS));&#xA;        String contentStr = new String(contents);&#xA;        this.setAttribute(extElement, &quot;contents&quot;, contentStr);&#xA;        return extElement;&#xA;    }&#xA;&#xA;    private String getCodeExtensionNameFromGkey() {&#xA;        Long parentGkey = (Long) getProperty(EXTENSIONFIELD_DEPENDENCY);&#xA;&#xA;        if (parentGkey == null) {&#xA;            logger.trace(&quot;code extension has no parent code extension&quot;);&#xA;            return null;&#xA;        }&#xA;&#xA;        IExtension parentExtension = ExtensionUtils.getExtension(UserContextUtils.getSystemUserContext(), parentGkey);&#xA;        if (parentExtension == null) {&#xA;            logger.error(&quot;Unable to find parent extension with gkey &quot; + parentGkey);&#xA;            return null;&#xA;        }&#xA;&#xA;        return parentExtension.getExtensionName();&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;}" />
<extension name="SnxExtensionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.model.Operator&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.argo.business.snx.SnxExtensionBase&#xA;import com.navis.extension.business.Extension&#xA;import com.navis.extension.invocation.dynamiccode.IExtension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.business.atoms.ExtensionLanguageEnum&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizViolation&#xA;import org.jdom.Element&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;/**&#xA; * Code taken from com.navis.argo.business.snx.SnxExtensionImporter;&#xA; * Added handling for extra field &quot;dependency&quot;&#xA; */&#xA;public class SnxExtensionImporter extends AbstractScopeAwareSnxImporter implements SnxExtensionBase, EBean {&#xA;&#xA;    private static final MetafieldId EXTENSIONFIELD_DEPENDENCY = MetafieldIdFactory.valueOf(&quot;extDependency&quot;);&#xA;&#xA;    private static final Logger logger = LoggerFactory.getLogger(SnxExtensionImporter.class);&#xA;&#xA;    public SnxExtensionImporter() {&#xA;    }&#xA;&#xA;    public void parseElement(Element inElement) throws BizViolation {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap();&#xA;        String extName = this.getRequiredAttributeStringValue(inElement, &quot;name&quot;);&#xA;        String scope = this.getOptionalAttributeString(inElement, &quot;scope&quot;, (String) null);&#xA;        identifierMap.put(&quot;name&quot;, extName);&#xA;        if (scope == null) {&#xA;            identifierMap.put(&quot;scope&quot;, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(&quot;scope&quot;, scope);&#xA;        }&#xA;&#xA;        this.recordIdentifier(inElement, identifierMap);&#xA;        //qualified reference is necessary here&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = this.getScopeInfo(scope, &quot;scope&quot;);&#xA;        String contentStr = this.getRequiredAttributeStringValue(inElement, &quot;contents&quot;);&#xA;        String extType = this.getRequiredAttributeStringValue(inElement, &quot;type&quot;);&#xA;        ExtensionLanguageEnum langEnum = (ExtensionLanguageEnum) this.getRequiredAttributeValue(inElement, &quot;language&quot;, ExtensionLanguageEnum.class);&#xA;        Extension ext = Extension.createOrUpdateAtGivenScope(extName, langEnum, extType, contentStr.getBytes(), this.getScopeCoordinates(scopeInfo));&#xA;        this.setOptionalStringProperty(inElement, &quot;description&quot;, ext, ExtensionField.EXT_DESCRIPTION);&#xA;        this.setOptionalBooleanProperty(inElement, &quot;is-enabled&quot;, ext, ExtensionField.EXT_ENABLED);&#xA;        setGkeyOfParentCodeExtension(getOptionalAttributeString(inElement, &quot;dependency&quot;, (String) null), ext);&#xA;    }&#xA;&#xA;    protected Operator findOperator(String inOprId) throws BizViolation {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Operator&quot;).addDqPredicate(PredicateFactory.eq(ArgoField.OPR_ID, inOprId));&#xA;        dq.setScopingEnabled(false);&#xA;        Operator opr = (Operator) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;        if (opr == null) {&#xA;            throw badReference(&quot;Operator&quot;, inOprId);&#xA;        } else {&#xA;            return opr;&#xA;        }&#xA;    }&#xA;&#xA;    private void setGkeyOfParentCodeExtension(String parentCodeExtensionName, Extension extension) {&#xA;        if (parentCodeExtensionName != null) {&#xA;            Long gkey = getGKeyOfCodeExtensionWithName(parentCodeExtensionName);&#xA;            if (gkey == null) {&#xA;                logger.error(&quot;Gkey not found: Unable to set parent code extension with name &quot; + parentCodeExtensionName + &quot; for code extension &quot; + extension.getExtensionName());&#xA;                return;&#xA;            }&#xA;            extension.setFieldValue(EXTENSIONFIELD_DEPENDENCY, gkey);&#xA;        }&#xA;        else {&#xA;            extension.setFieldValue(EXTENSIONFIELD_DEPENDENCY, null);&#xA;        }&#xA;    }&#xA;&#xA;    private Long getGKeyOfCodeExtensionWithName(String codeExtensionName) {&#xA;        DomainQuery domainQuery = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                .addDqPredicate(PredicateFactory.eq(ExtensionField.EXT_NAME, codeExtensionName));&#xA;&#xA;        try {&#xA;            IExtension extension = (IExtension) HibernateApi.getInstance().getUniqueEntityByDomainQuery(domainQuery);&#xA;            if (extension==null) {&#xA;                logger.error(&quot;Unable to find code extension with name &quot;+codeExtensionName);&#xA;                return null;&#xA;            }&#xA;            return extension.getUniqueKey();&#xA;        }&#xA;        catch (BizViolation bv) {&#xA;            logger.error(&quot;Found more than one extension with name &quot; + codeExtensionName + &quot;: &quot; + bv.toString());&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;}" />
<extension name="SnxGeneralReferenceExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoEntity&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.snx.AbstractSnxXmlExporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.DomainQueryImpl&#xA;import org.jdom.Element&#xA;&#xA;class SnxGeneralReferenceExporter extends AbstractSnxXmlExporter implements EBean {&#xA;&#xA;    public SnxGeneralReferenceExporter() {&#xA;        super(null, null);&#xA;    }&#xA;&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery domainQuery = new DomainQueryImpl(ArgoEntity.GENERAL_REFERENCE)&#xA;                .addDqField(ArgoField.REF_TYPE)&#xA;                .addDqField(ArgoField.REF_ID1)&#xA;                .addDqField(ArgoField.REF_ID2)&#xA;                .addDqField(ArgoField.REF_ID3)&#xA;                .addDqField(ArgoField.REF_VALUE1)&#xA;                .addDqField(ArgoField.REF_VALUE2)&#xA;                .addDqField(ArgoField.REF_VALUE3)&#xA;                .addDqField(ArgoField.REF_VALUE4)&#xA;                .addDqField(ArgoField.REF_VALUE5)&#xA;                .addDqField(ArgoField.REF_VALUE6)&#xA;                .addDqField(ArgoField.REF_CREATOR)&#xA;                .addDqField(ArgoField.REF_CREATED)&#xA;                .addDqField(ArgoField.REF_CHANGER)&#xA;                .addDqField(ArgoField.REF_CHANGED);&#xA;        return domainQuery;&#xA;    }&#xA;&#xA;    protected Element createOneEntityElement() {&#xA;        Element element = createElement(ArgoEntity.GENERAL_REFERENCE);&#xA;&#xA;        setAttributeFromField(element, ArgoField.REF_TYPE.getFieldId(), ArgoField.REF_TYPE);&#xA;        setAttributeFromField(element, ArgoField.REF_ID1.getFieldId(), ArgoField.REF_ID1);&#xA;        setAttributeFromField(element, ArgoField.REF_ID2.getFieldId(), ArgoField.REF_ID2);&#xA;&#x9;&#x9;setAttributeFromField(element, ArgoField.REF_ID3.getFieldId(), ArgoField.REF_ID3);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE1.getFieldId(), ArgoField.REF_VALUE1);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE2.getFieldId(), ArgoField.REF_VALUE2);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE3.getFieldId(), ArgoField.REF_VALUE3);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE4.getFieldId(), ArgoField.REF_VALUE4);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE5.getFieldId(), ArgoField.REF_VALUE5);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE6.getFieldId(), ArgoField.REF_VALUE6);&#xA;        setAttributeFromField(element, ArgoField.REF_CREATOR.getFieldId(), ArgoField.REF_CREATOR);&#xA;        setAttributeFromField(element, ArgoField.REF_CREATED.getFieldId(), ArgoField.REF_CREATED);&#xA;        setAttributeFromField(element, ArgoField.REF_CHANGER.getFieldId(), ArgoField.REF_CHANGER);&#xA;        setAttributeFromField(element, ArgoField.REF_CHANGED.getFieldId(), ArgoField.REF_CHANGED);&#xA;&#xA;        return element;&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Exporter for General Reference&quot;;&#xA;    }&#xA;}&#xA;" />
<extension name="SnxGeneralReferenceImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.snx.AbstractSnxEntityImporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import org.jdom.Element&#xA;&#xA;public class SnxGeneralReferenceImporter extends AbstractSnxEntityImporter implements EBean {&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        recordIdentifier(inElement, ArgoField.REF_TYPE.getFieldId());&#xA;&#xA;        String type = getRequiredAttributeStringValue(inElement, ArgoField.REF_TYPE.getFieldId());&#xA;        String id1 = getRequiredAttributeStringValue(inElement, ArgoField.REF_ID1.getFieldId());&#xA;        String id2 = getOptionalAttributeString(inElement, ArgoField.REF_ID2.getFieldId(), null);&#xA;        String id3 = getOptionalAttributeString(inElement, ArgoField.REF_ID3.getFieldId(), null);&#xA;&#xA;        String value1 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE1.getFieldId(), String.class, null);&#xA;        String value2 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE2.getFieldId(), String.class, null);&#xA;        String value3 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE3.getFieldId(), String.class, null);&#xA;        String value4 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE4.getFieldId(), String.class, null);&#xA;        String value5 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE5.getFieldId(), String.class, null);&#xA;        String value6 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE6.getFieldId(), String.class, null);&#xA;&#xA;        FieldChanges fieldChanges = new FieldChanges();&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE1, value1);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE2, value2);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE3, value3);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE4, value4);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE5, value5);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE6, value6);&#xA;&#xA;        String userId = ContextHelper.getThreadUserId();&#xA;&#xA;        GeneralReference generalReference = GeneralReference.findUniqueEntryById(type, id1, id2, id3);&#xA;&#xA;        if (generalReference == null) {&#xA;            generalReference = GeneralReference.createOrUpdate(type, id1, id2, id3, value1, value2, value3, value4, value5, value6);&#xA;            generalReference.setFieldValue(ArgoField.REF_CREATED, TimeUtils.getCurrentTime());&#xA;            if (userId != null) {&#xA;                generalReference.setFieldValue(ArgoField.REF_CREATOR, userId);&#xA;            }&#xA;            HibernateApi.getInstance().save(generalReference);&#xA;        }&#xA;&#xA;        generalReference.applyFieldChanges(fieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Importer for General Reference&quot;;&#xA;    }&#xA;}" />
<extension name="SnxDbVariformFileDefinitionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ConfigSettingEntity&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;&#xA;/**&#xA; * Created by kalimka on 01.08.2017.&#xA; */&#xA;public class SnxDbVariformFileDefinitionExporter extends AbstractScopeAwareSnxExporter implements EBean {&#xA;&#xA;    public SnxDbVariformFileDefinitionExporter() {&#xA;        super(null, null);&#xA;    }&#xA;    /**&#xA;     * Constructor.&#xA;     *&#xA;     * @param inTranslations a Map providing code translations from the QueryResult data to the XML file.  The key is the XML attribute tag +&#xA;     *                       QueryResult value.  Null is OK.&#xA;     * @param inNamespace Namespace for XML tags.  Null is OK.&#xA;     */&#xA;    protected SnxDbVariformFileDefinitionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace)&#xA;    }&#xA;&#xA;    @Override&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ConfigSettingEntity.DB_VARIFORM_FILE_DEFINITION)&#xA;                .addDqField(ConfigSettingField.CFGVAR_NAME)&#xA;                .addDqField(ConfigSettingField.CFGVAR_DESCRIPTION)&#xA;                .addDqField(ConfigSettingField.CFGVAR_ENABLED)&#xA;                .addDqField(ConfigSettingField.CFGVAR_VARIFORM_XML)&#xA;                .addDqField(ConfigSettingField.CFGVAR_VARIFORM_IDS)&#xA;                .addDqField(ConfigSettingField.CFGVAR_SCOPE_LEVEL)&#xA;                .addDqField(ConfigSettingField.CFGVAR_SCOPE_GKEY)&#xA;                .addDqField(ConfigSettingField.CFGVAR_CREATOR)&#xA;                .addDqField(ConfigSettingField.CFGVAR_CHANGED);&#xA;        return dq;&#xA;    }&#xA;&#xA;    @Override&#xA;    protected Element createOneEntityElement() {&#xA;        Element dbVariformElement = createElement(DBVARIFORM);&#xA;&#xA;        setAttributeFromField(dbVariformElement, NAME, ConfigSettingField.CFGVAR_NAME);&#xA;        setAttributeFromField(dbVariformElement, DESCRIPTION, ConfigSettingField.CFGVAR_DESCRIPTION);&#xA;        setAttributeFromField(dbVariformElement, ENABLED, ConfigSettingField.CFGVAR_ENABLED);&#xA;        setAttributeFromField(dbVariformElement, VARIFORM_XML, ConfigSettingField.CFGVAR_VARIFORM_XML);&#xA;        setAttributeFromField(dbVariformElement, VARIFORM_IDS, ConfigSettingField.CFGVAR_VARIFORM_IDS);&#xA;&#xA;        String scopeGkey = (String) getProperty(ConfigSettingField.CFGVAR_SCOPE_GKEY);&#xA;        Long gkey = null;&#xA;        if (scopeGkey != null) {&#xA;            gkey = Long.parseLong(scopeGkey);&#xA;        }&#xA;        Long scopeLevel = (Long) getProperty(ConfigSettingField.CFGVAR_SCOPE_LEVEL);&#xA;        setOptionalAttribute(dbVariformElement, A_SCOPE, getScopePathName(gkey, scopeLevel));&#xA;&#xA;        setAttributeFromField(dbVariformElement, CREATOR, ConfigSettingField.CFGVAR_CREATOR);&#xA;        setAttributeFromField(dbVariformElement, CHANGER, ConfigSettingField.CFGVAR_CHANGER);&#xA;&#xA;        return dbVariformElement&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;&#xA;    private String DBVARIFORM = &quot;db-variform-file-definition&quot;;&#xA;    private String NAME = &quot;cfgvar-name&quot;;&#xA;    private String DESCRIPTION = &quot;cfgvar-description&quot;;&#xA;    private String ENABLED = &quot;cfgvar-enabled&quot;;&#xA;    private String VARIFORM_XML = &quot;cfgvar-variform-xml&quot;;&#xA;    private String VARIFORM_IDS = &quot;cfgvar-variform-ids&quot;;&#xA;    private String A_SCOPE = &quot;scope&quot;;&#xA;    private String SCOPE_LEVEL = &quot;cfgvar-scope-level&quot;;&#xA;    private String SCOPE_GKEY = &quot;cfgvar-scope-gkey&quot;&#xA;    private String CREATED = &quot;cfgvar-created&quot;;&#xA;    private String CREATOR = &quot;cfgvar-creator&quot;;&#xA;    private String CHANGED = &quot;cfgvar-changed&quot;;&#xA;    private String CHANGER = &quot;cfgvar-changer&quot;;&#xA;}" />
<extension name="SnxDbVariformFileDefinitionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.configuration.variform.DbVariformFileDefinition&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import org.jdom.Element&#xA;&#xA;public class SnxDbVariformFileDefinitionImporter extends AbstractScopeAwareSnxImporter implements EBean {&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        recordIdentifier(inElement, NAME);&#xA;        //get Name.&#xA;        String variformName = getRequiredAttributeStringValue(inElement, NAME);&#xA;&#xA;        DbVariformFileDefinition definition = DbVariformFileDefinition.findDbVariformByName(variformName);&#xA;        if (definition == null) {&#xA;            definition = new DbVariformFileDefinition();&#xA;            definition.setCfgvarName(variformName);&#xA;            definition.setCfgvarCreated(TimeUtils.getCurrentTime());&#xA;            String userId = ContextHelper.getThreadUserId();&#xA;            if (userId != null) {&#xA;                definition.setCfgvarCreator(userId);&#xA;            }&#xA;            String xml = getOptionalAttributeString(inElement, VARIFORM_XML, null);&#xA;            if (xml != null) {&#xA;                definition.setCfgvarVariformXml(xml);&#xA;            }&#xA;            setScope(inElement, definition);&#xA;            HibernateApi.getInstance().save(definition);&#xA;        } else {&#xA;            setScope(inElement, definition);&#xA;            setOptionalProperty(inElement, VARIFORM_XML, definition, ConfigSettingField.CFGVAR_VARIFORM_XML);&#xA;        }&#xA;        setOptionalProperty(inElement, DESCRIPTION, definition, ConfigSettingField.CFGVAR_DESCRIPTION);&#xA;        setOptionalProperty(inElement, ENABLED, definition, ConfigSettingField.CFGVAR_ENABLED);&#xA;        setOptionalProperty(inElement, VARIFORM_IDS, definition, ConfigSettingField.CFGVAR_VARIFORM_IDS);&#xA;        definition.setCfgvarChanged(TimeUtils.getCurrentTime());&#xA;        String userId = ContextHelper.getThreadUserId();&#xA;        if (userId != null) {&#xA;            definition.setCfgvarChanger(userId);&#xA;        }&#xA;    }&#xA;&#xA;    private void setScope(Element inElement, DbVariformFileDefinition definition) {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap&lt;&gt;();&#xA;        String scope = getOptionalAttributeString(inElement, A_SCOPE, null);&#xA;        if (scope == null) {&#xA;            identifierMap.put(A_SCOPE, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(A_SCOPE, scope);&#xA;        }&#xA;        recordIdentifier(inElement, identifierMap);&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = getScopeInfo(scope, A_SCOPE);&#xA;        ScopeCoordinates scopeCoordinates = getScopeCoordinates(scopeInfo);&#xA;        if (scopeCoordinates != null) {&#xA;            if (scopeCoordinates.isScopeGlobal()) {&#xA;                definition.setCfgvarScopeLevel(ScopeCoordinates.GLOBAL_LEVEL);&#xA;            } else {&#xA;                int inScope = scopeCoordinates.getMaxScopeLevel();&#xA;                definition.setCfgvarScopeLevel((long) inScope);&#xA;                definition.setCfgvarScopeGkey(String.valueOf(scopeCoordinates.getScopeLevelCoord(inScope)));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;&#xA;    private String DBVARIFORM = &quot;db-variform-file-definition&quot;;&#xA;    private String NAME = &quot;cfgvar-name&quot;;&#xA;    private String DESCRIPTION = &quot;cfgvar-description&quot;;&#xA;    private String ENABLED = &quot;cfgvar-enabled&quot;;&#xA;    private String VARIFORM_XML = &quot;cfgvar-variform-xml&quot;;&#xA;    private String VARIFORM_IDS = &quot;cfgvar-variform-ids&quot;;&#xA;    private String SCOPE_LEVEL = &quot;cfgvar-scope-level&quot;;&#xA;    private String SCOPE_GKEY = &quot;cfgvar-scope-gkey&quot;&#xA;    private String CREATED = &quot;cfgvar-created&quot;;&#xA;    private String CREATOR = &quot;cfgvar-creator&quot;;&#xA;    private String CHANGED = &quot;cfgvar-changed&quot;;&#xA;    private String CHANGER = &quot;cfgvar-changer&quot;;&#xA;    private String A_SCOPE = &quot;scope&quot;;&#xA;}" />
<extension name="GenericExportProcessor" scope="RAL" type="GROOVY_WS_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoAssetsField&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.ArgoReportsField&#xA;import com.navis.argo.business.snx.IEntityXmlExporter&#xA;import com.navis.argo.business.snx.SnxBase&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.edi.EdiField&#xA;import com.navis.external.argo.AbstractGroovyWSCodeExtension&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.portal.query.PredicateIntf&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.security.SecurityField&#xA;import com.navis.services.ServicesField&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; * This class is used to export SNX for Entities with built-in SNX Exporter and&#xA; * Entities without built-in SNX Exporter (Using Generic Exporter)&#xA; */&#xA;public class GenericExportProcessor extends AbstractGroovyWSCodeExtension {&#xA;&#xA;    /*public String execute() {&#xA;        return executeSnxExport(&quot;DigitalAsset&quot;);&#xA;    }*/&#xA;&#xA;    public String execute(Map&lt;String, Object&gt; inParams) {&#xA;        if(inParams == null){&#xA;            return &quot;Parameter not found in xml&quot;;&#xA;        }&#xA;&#xA;        String entityName = inParams.get(ENTITY_NAME_KEY);&#xA;        if(entityName == null) {&#xA;            return &quot;Entity name is Mandatory Parameter&quot;;&#xA;        }&#xA;&#xA;        String entityItem = inParams.get(ENTITY_ITEM_KEY);&#xA;        return exportSnxFromEntityExporter(entityName, formatEntityItemForSqlQuery(entityItem));&#xA;    }&#xA;&#xA;    private List&lt;String&gt; formatEntityItemForSqlQuery(String inEntityItem) {&#xA;        if(inEntityItem != null) {&#xA;            return inEntityItem.split(&quot;,&quot;).toList();&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    /**&#xA;     * Export the SNX from spcific entity exporter&#xA;     * @param inEntityName&#xA;     * @return String&#xA;     */&#xA;    private String exportSnxFromEntityExporter(String inEntityName, List&lt;String&gt; inEntityItem) {&#xA;        Element root = XmlUtil.createRootElement(SnxBase.E_ROOT, SnxBase.SNX_SCHEMA_URL);&#xA;        IEntityXmlExporter exporter = getSnxExporterForEntity(inEntityName);&#xA;        if (exporter == null) {&#xA;            LOGGER.error(&quot;Snx Exporter is null for entity :&quot; + inEntityName);&#xA;            return null;&#xA;        }&#xA;        exporter.setPrimaryKeys(findPrimaryKeysForEntity(inEntityName, inEntityItem));&#xA;        Iterator elementIterator = exporter.getElementIterator();&#xA;        while (elementIterator.hasNext()) {&#xA;            Element e = (Element) elementIterator.next();&#xA;            root.addContent(e);&#xA;        }&#xA;        String exportedXML = null;&#xA;        if (root != null) {&#xA;            exportedXML = XmlUtil.convertToString(root, true)&#xA;        }&#xA;&#xA;        return XmlUtil.ensureHeader(exportedXML); ;&#xA;    }&#xA;&#xA;    /**&#xA;     * Find PKs for entity&#xA;     * @param inEntityName&#xA;     * @return Serializable[]&#xA;     */&#xA;    private Serializable[] findPrimaryKeysForEntity(String inEntityName, List&lt;String&gt; inEntityItem) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(inEntityName);&#xA;        PredicateIntf filter = getFilterForEntity(inEntityName);&#xA;        if (filter != null) {&#xA;            dq.addDqPredicate(filter);&#xA;        }&#xA;        if(inEntityItem != null &amp;&amp; !inEntityItem.contains(&quot;All&quot;)) {&#xA;            dq.addDqPredicate(PredicateFactory.in(whereClauseMap.get(inEntityName), inEntityItem));&#xA;        }&#xA;&#xA;        MetafieldId gkeyField = getGkeyMetafieldForEntity(inEntityName);&#xA;        if (gkeyField != null) {&#xA;            dq.addDqOrdering(Ordering.asc(gkeyField));&#xA;        }&#xA;        return (Serializable[]) Roastery.getHibernateApi().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;    /**&#xA;     * Find PKs for entity&#xA;     * @param inEntityName&#xA;     * @return Serializable[]&#xA;     */&#xA;    private Serializable[] findPrimaryKeysForEntity(String inEntityName) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(inEntityName);&#xA;        PredicateIntf filter = getFilterForEntity(inEntityName);&#xA;        if (filter != null) {&#xA;            dq.addDqPredicate(filter);&#xA;        }&#xA;        MetafieldId gkeyField = getGkeyMetafieldForEntity(inEntityName);&#xA;        if (gkeyField != null) {&#xA;            dq.addDqOrdering(Ordering.asc(gkeyField));&#xA;        }&#xA;        return (Serializable[]) Roastery.getHibernateApi().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;    /**&#xA;     * Find Snx Exporter of Type IEntityXmlExporter&#xA;     * @param inEntityName&#xA;     * @return IEntityXmlExporter&#xA;     */&#xA;    private IEntityXmlExporter getSnxExporterForEntity(String inEntityName) {&#xA;        String exporterBeanName = getExporterBeanName(inEntityName);&#xA;        if (!Roastery.containsBean(exporterBeanName)) {&#xA;            throw BizFailure.create(&quot;No Exporter found for &quot; + inEntityName + &quot;. Expected a bean named &lt;&quot; + exporterBeanName + &quot;&gt;&quot;);&#xA;        }&#xA;        Object bean = Roastery.getBean(exporterBeanName);&#xA;        if (!(bean instanceof IEntityXmlExporter)) {&#xA;            throw BizFailure.create(&quot;Exporter &lt;&quot; + exporterBeanName + &quot;&gt; needs to be refactored per ARGO-7012&quot;);&#xA;        }&#xA;        return (IEntityXmlExporter) bean;&#xA;    }&#xA;&#xA;    private PredicateIntf getFilterForEntity(String inEntityName) {&#xA;        MetafieldId filterField = filterKeyMap.get(inEntityName)&#xA;        if (filterField != null) {&#xA;            LOGGER.info(&quot;Found the filter key for entity :&quot;+inEntityName);&#xA;            return PredicateFactory.eq(filterField, Boolean.FALSE)&#xA;        }&#xA;&#xA;        return null;&#xA;    }&#xA;&#xA;    private MetafieldId getGkeyMetafieldForEntity(String inEntityName) {&#xA;        return entityGkeyMap.get(inEntityName);&#xA;    }&#xA;&#xA;    /**&#xA;     *  Find Exporter Bean name for Entity&#xA;     * @param inEntityName&#xA;     * @return String&#xA;     */&#xA;    private String getExporterBeanName(String inEntityName) {&#xA;        return SNX_BEAN_PREFIX + inEntityName + SNX_EXPORTER_BEAN_SUFFIX;&#xA;    }&#xA;&#xA;    //Initialize the list of entity and its metafield gkey&#xA;    static {&#xA;        entityGkeyMap.put(&quot;JobGroup&quot;, QuartzField.JOBGROUP_GKEY);&#xA;        entityGkeyMap.put(&quot;HoldPermissionView&quot;, ServicesField.HPV_GKEY);&#xA;        entityGkeyMap.put(&quot;DbVariformFileDefinition&quot;, ConfigSettingField.CFGVAR_GKEY);&#xA;    }&#xA;&#xA;    //Initialize the list of entities and its BUILT_IN meta field ids&#xA;    static {&#xA;        filterKeyMap.put(&quot;ReportableEntity&quot;, ArgoReportsField.REPENT_IS_BUILT_IN);&#xA;        filterKeyMap.put(&quot;DigitalAsset&quot;, ArgoAssetsField.DA_PRE_DEPLOYED);&#xA;        filterKeyMap.put(&quot;Extension&quot;, ExtensionField.EXT_SYS_SEEDED);&#xA;        filterKeyMap.put(&quot;ArgoSecRole&quot;, SecurityField.ROLE_IS_DELEGATED);&#xA;    }&#xA;&#xA;    static {&#xA;        whereClauseMap.put(&quot;DbVariformFileDefinition&quot;, ExtensionField.EXT_GKEY);&#xA;        whereClauseMap.put(&quot;EventType&quot;, ServicesField.EVNTTYPE_GKEY);&#xA;        whereClauseMap.put(&quot;DbMetafield&quot;, ConfigSettingField.MFDO_GKEY);&#xA;        whereClauseMap.put(&quot;DigitalAsset&quot;, ArgoAssetsField.DA_GKEY);&#xA;        whereClauseMap.put(&quot;DbVariformFileDefinition&quot;, ConfigSettingField.CFGVAR_GKEY);&#xA;        whereClauseMap.put(&quot;ExtensionInjection&quot;, ExtensionField.EXTINJ_GKEY);&#xA;        whereClauseMap.put(&quot;NoticeRequest&quot;, ServicesField.NOTICE_GKEY);&#xA;        whereClauseMap.put(&quot;EdiSession&quot;, EdiField.EDISESS_GKEY);&#xA;        whereClauseMap.put(&quot;EdiMailbox&quot;, EdiField.EDIMLBX_GKEY);&#xA;        whereClauseMap.put(&quot;EdiMessageType&quot;, EdiField.EDIMSG_GKEY);&#xA;        whereClauseMap.put(&quot;ArgoGroovyJobDefinition&quot;, ArgoJobField.JOBDEF_GKEY);&#xA;        whereClauseMap.put(&quot;GeneralReference&quot;, ArgoField.REF_GKEY);&#xA;        whereClauseMap.put(&quot;Extension&quot;, ExtensionField.EXT_GKEY);&#xA;    }&#xA;&#xA;    private static HashMap&lt;String, MetafieldId&gt; entityGkeyMap = new HashMap&lt;&gt;();&#xA;    private static HashMap&lt;String, MetafieldId&gt; filterKeyMap = new HashMap&lt;&gt;();&#xA;&#xA;    private final static String SNX_BEAN_PREFIX = &quot;snx&quot;;&#xA;    private final static String SNX_EXPORTER_BEAN_SUFFIX = &quot;Exporter&quot;;&#xA;    private final static String ENTITY_NAME_KEY = &quot;entity-name&quot;;&#xA;    private final static String ENTITY_ITEM_KEY = &quot;entity-item&quot;&#xA;    private static HashMap&lt;String, MetafieldId&gt; whereClauseMap = new HashMap&lt;&gt;();&#xA;    private static final Logger LOGGER = Logger.getLogger(GenericExportProcessor.class);&#xA;}&#xA;" />
<extension name="GenericImportProcessor" scope="RAL" type="GROOVY_WS_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2020 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.external.argo.AbstractGroovyWSCodeExtension&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Document&#xA;import org.jdom.Element&#xA;import org.jdom.input.SAXBuilder&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.snx.ISnxImporter&#xA;import com.navis.argo.business.snx.SnxUtil&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.internationalization.UserMessage&#xA;import com.navis.framework.util.message.MessageCollector&#xA;&#xA;/*&#xA; * GenericImportProcessor&#xA; *&#xA; * @author &lt;a href=&quot;mailto:pravin.kumar@navis.com&quot;&gt;Pravin Kumar&lt;/a&gt;&#xA; *&#xA; * Date: 15-07-2020&#xA; *&#xA; * Called from: AD Tool&#xA; *&#xA; * Description: This class is used to import SNX for Entities with built-in SNX Importer&#xA; *&#xA;*/&#xA;public class GenericImportProcessor extends AbstractGroovyWSCodeExtension {&#xA;&#xA;&#xA;&#x9;private boolean _lastImportSuccessful;&#xA;&#xA;&#x9;public String execute(Map&lt;String, Object&gt; inParams) {&#xA;&#x9;&#x9;if(inParams == null){&#xA;&#x9;&#x9;&#x9;return &quot;Parameter not found in xml&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String snxValue = inParams.get(SNX_VALUE_KEY);&#xA;&#x9;&#x9;if(snxValue == null) {&#xA;&#x9;&#x9;&#x9;return &quot;Snx Value is Mandatory Parameter&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;byte[] actualByte = Base64.getDecoder()&#xA;&#x9;&#x9;&#x9;&#x9;.decode(snxValue);&#xA;&#xA;&#x9;&#x9;snxValue = new String(actualByte);&#xA;&#xA;&#x9;&#x9;return executeSnxImport(snxValue);&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Import snx xml&#xA;&#x9; * @param inSnxXML&#xA;&#x9; * @return response String&#xA;&#x9; */&#xA;&#x9;public String executeSnxImport(String inSnxXML) {&#xA;&#x9;&#x9;StringBuilder responseBuilder = new StringBuilder();&#xA;&#x9;&#x9;_lastImportSuccessful=false;&#xA;&#x9;&#x9;if (inSnxXML == null) {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;SNX not found!&quot;)&#xA;&#x9;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;Document snxDocument = parseXmlDocument(inSnxXML);&#xA;&#x9;&#x9;if (snxDocument == null) {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;Error in parsing SNX-XML document!&quot;);&#xA;&#x9;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;UserContext currentUserContext = ContextHelper.getThreadUserContext();&#xA;&#xA;&#x9;&#x9;MessageCollector messageCollector = importSnxElement(snxDocument, currentUserContext);&#xA;&#x9;&#x9;if (messageCollector != null &amp;&amp; messageCollector.hasError()) {&#xA;&#x9;&#x9;&#x9;List&lt;UserMessage&gt; messages = messageCollector.getMessages();&#xA;&#x9;&#x9;&#x9;for (final UserMessage eachMessage : messages) {&#xA;&#x9;&#x9;&#x9;&#x9;responseBuilder.append(eachMessage.getSeverity().toString() + &quot; &quot; + eachMessage.getMessageKey().getKey() + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;Import successful!&quot;);&#xA;&#x9;&#x9;&#x9;_lastImportSuccessful=true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//Revert the user context values to the thread user context&#xA;&#x9;&#x9;TransactionParms.getBoundParms().setUserContext(currentUserContext);&#xA;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;}&#xA;&#xA;&#x9;public wasLastImportSuccessful(){&#xA;&#x9;&#x9;return _lastImportSuccessful;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * Parse xml document from String to org.jdom.Document&#xA;&#x9; * @param String snxXmlDocument&#xA;&#x9; * @return org.jdom.Document&#xA;&#x9; */&#xA;&#x9;private Document parseXmlDocument(String inSnxXmlDocument) {&#xA;&#x9;&#x9;SAXBuilder builder = new SAXBuilder();&#xA;&#x9;&#x9;Document document = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;document = builder.build(new StringReader(inSnxXmlDocument));&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Error parsing xml document&quot;, e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return document;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Import SNX Element&#xA;&#x9; * @param org.jdom.Document&#xA;&#x9; * @param UserContext&#xA;&#x9; * @return MessageCollector&#xA;&#x9; */&#xA;&#x9;private MessageCollector importSnxElement(Document inSnx, UserContext inUc) {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;PersistenceTemplate pt = new PersistenceTemplate(inUc);&#xA;&#x9;&#x9;&#x9;Element rootElement = inSnx.getRootElement();&#xA;&#xA;&#x9;&#x9;&#x9;List&lt;Element&gt; children = rootElement.getChildren();&#xA;&#x9;&#x9;&#x9;if (children == null || children.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;//Import file is empty&#xA;&#x9;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;ISnxImporter importer;&#xA;&#x9;&#x9;&#x9;for (Element element : children) {&#xA;&#x9;&#x9;&#x9;&#x9;String entityName = element.getName();&#xA;&#x9;&#x9;&#x9;&#x9;importer = getSnxImporterForElement(entityName);&#xA;&#x9;&#x9;&#x9;&#x9;if (importer == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Can not find the SnxImporter for Element: &quot; + entityName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CarinaPersistenceCallback callback = new CarinaPersistenceCallback() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;@Override&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;protected void doInTransaction() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;importer.setScopeParameters();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ContextHelper.setThreadDataSource(DataSourceEnum.SNX);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;importer.parseElement(element);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception inEx) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TransactionParms parms = TransactionParms.getBoundParms();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MessageCollector msgCollector = parms.getMessageCollector();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (msgCollector != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;msgCollector.registerExceptions(inEx);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;&#x9;&#x9;pt.invoke(callback);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} catch (Exception inEx) {&#xA;&#x9;&#x9;&#x9;throw BizFailure.create(&quot;SNX Import failed: &quot; + inEx);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Find SnxImporter for given element name&#xA;&#x9; * @param String elementName&#xA;&#x9; * @return&#xA;&#x9; */&#xA;&#x9;private ISnxImporter getSnxImporterForElement(String inElementName) {&#xA;&#x9;&#x9;ISnxImporter importer;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;importer = SnxUtil.getSnxImporterForElement(inElementName);&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;throw BizFailure.create(&quot;Could not find Importer: &quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return importer;&#xA;&#x9;}&#xA;&#xA;&#x9;private final static String SNX_VALUE_KEY = &quot;entity-name&quot;;&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(GenericImportProcessor.class);&#xA;}" />
<extension name="RegisterCustomBeans" type="SERVER_LIFECYCLE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.extension.invocation.dynamiccode.beans.definition.CustomCodeExtensionDrivenBeanDefinition&#xA;import com.navis.extension.invocation.dynamiccode.groovy.beans.GroovyFactoryBean&#xA;import com.navis.external.framework.server.AbstractServerLifecycle&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.context.bean.BeanCreationTypeEnum&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;import org.springframework.beans.factory.BeanFactory&#xA;import org.springframework.beans.factory.config.BeanDefinition&#xA;import org.springframework.beans.factory.support.BeanDefinitionRegistry&#xA;import org.springframework.context.ConfigurableApplicationContext&#xA;&#xA;/**&#xA; * This class is used to register custom Spring beans for SNX IMPORT&#xA; */&#xA;public class RegisterCustomBeans extends AbstractServerLifecycle {&#xA;    private static final Logger LOGGER = LoggerFactory.getLogger(RegisterCustomBeans.class);&#xA;&#xA;    @Override&#xA;    public void onInitialization() {&#xA;        PersistenceTemplate pt = new PersistenceTemplate(getUserContext());&#xA;        CarinaPersistenceCallback cb = new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            public void doInTransaction() {&#xA;                try {&#xA;                    initializeInTransaction();&#xA;                }&#xA;                catch (Exception e) {&#xA;                    LOGGER.error(&quot;Snx Extension: Initialization Failure&quot;);&#xA;                    LOGGER.error(&quot;&quot;, e);&#xA;                }&#xA;            }&#xA;        };&#xA;        pt.invoke(cb);&#xA;    }&#xA;&#xA;    /**&#xA;     * Entry point that allows this class to be run as a script runner script&#xA;     * @return list of registered beans&#xA;     */&#xA;    public String execute() {&#xA;        return initializeInTransaction();&#xA;    }&#xA;&#xA;    public String initializeInTransaction() {&#xA;        StringBuilder beans = new StringBuilder();&#xA;        beans.append(addToRoastery(DB_VARIFORM_DEFINITION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(DB_VARIFORM_DEFINITION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HOLD_PERMISSION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HOLD_PERMISSION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_GROUP_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_GROUP_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_USER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_USER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_ECUSER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_ECUSER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BACKGROUND_JOB_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BACKGROUND_JOB_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRUCK_ACTION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRUCK_ACTION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(PERSISTENT_RESOURCE_BUNDLE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(PERSISTENT_RESOURCE_BUNDLE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(NOTICE_REQUEST_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_LOAD_REQUEST_CODE_MAPPING_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_LOAD_REQUEST_CODE_MAPPING_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_GROOVY_JOB_DEFINITION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_GROOVY_JOB_DEFINITION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(GENERAL_REFERENCE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(GENERAL_REFERENCE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_CONFIGURATION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_CONFIGURATION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CHASSIS_PROFILE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CHASSIS_PROFILE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_SEQUENCE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_SEQUENCE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_NODE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_NODE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_MODEL_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_MODEL_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_USER_RANGE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_USER_RANGE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(WORKSTATION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(WORKSTATION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CREDIT_CARD_READER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CREDIT_CARD_READER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRADING_PARTNER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRADING_PARTNER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HAZ_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HAZ_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(&quot;snxSessionImporter&quot;, EDISESSION_IMPORTER));&#xA;        beans.append(addToRoastery(EXTENSION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(EXTENSION_IMPORTER)).append(&quot;\n&quot;);&#xA;&#xA;        return beans.toString();&#xA;    }&#xA;&#xA;    public String addToRoastery(String inExtensionName) {&#xA;        String extensionName = StringUtils.capitalize(inExtensionName);&#xA;        String beanName = StringUtils.uncapitalize(inExtensionName);&#xA;        addToRoastery(beanName, extensionName);&#xA;        return beanName + &quot; -&gt; &quot; + extensionName;&#xA;    }&#xA;&#xA;    public void addToRoastery(String inBeanName, String inExtensionName) {&#xA;        registerBean(Roastery.getBeanFactory(), inBeanName, inExtensionName);&#xA;    }&#xA;&#xA;    public void registerBean(BeanFactory inFactory, String inBeanName, String inExtensionName) {&#xA;        BeanDefinitionRegistry registry = getRegistry(inFactory);&#xA;        BeanDefinition beanDef = new CustomCodeExtensionDrivenBeanDefinition(BeanCreationTypeEnum.NEW_CUSTOM_CODE_EXTENSION, inBeanName,&#xA;                inExtensionName);&#xA;        beanDef.setScope(BeanDefinition.SCOPE_PROTOTYPE);&#xA;        beanDef.setBeanClassName(GroovyFactoryBean.class.getCanonicalName());&#xA;&#xA;        // constructor set to code extension name&#xA;        beanDef.getConstructorArgumentValues().addIndexedArgumentValue(0, inExtensionName);&#xA;        registry.registerBeanDefinition(inBeanName, beanDef);&#xA;    }&#xA;&#xA;    private BeanDefinitionRegistry getRegistry(BeanFactory inFactory) {&#xA;        BeanDefinitionRegistry registry = null;&#xA;        if (inFactory instanceof ConfigurableApplicationContext) {&#xA;            inFactory = ((ConfigurableApplicationContext) inFactory).getBeanFactory();&#xA;        }&#xA;        if (!(inFactory instanceof BeanDefinitionRegistry)) {&#xA;            throw BizFailure.create(inFactory + &quot; was NOT a an instanceOf BeanDefinitionRegistry and cannot be overridden&quot;);&#xA;        } else {&#xA;            registry = (BeanDefinitionRegistry) inFactory;&#xA;        }&#xA;        return registry;&#xA;    }&#xA;&#xA;    private final String DB_VARIFORM_DEFINITION_EXPORTER = &quot;SnxDbVariformFileDefinitionExporter&quot;;&#xA;    private final String DB_VARIFORM_DEFINITION_IMPORTER = &quot;SnxDbVariformFileDefinitionImporter&quot;;&#xA;    private final String HOLD_PERMISSION_EXPORTER = &quot;SnxHoldPermissionViewExporter&quot;;&#xA;    private final String HOLD_PERMISSION_IMPORTER = &quot;SnxHoldPermissionViewImporter&quot;;&#xA;    private final String JOB_GROUP_EXPORTER = &quot;SnxJobGroupExporter&quot;;&#xA;    private final String JOB_GROUP_IMPORTER = &quot;SnxJobGroupImporter&quot;;&#xA;    private final String XPE_USER_EXPORTER = &quot;SnxXpeUserExporter&quot;;&#xA;    private final String XPE_USER_IMPORTER = &quot;SnxXpeUserImporter&quot;;&#xA;    private final String XPE_ECUSER_EXPORTER = &quot;SnxEcUserExporter&quot;;&#xA;    private final String XPE_ECUSER_IMPORTER = &quot;SnxEcUserImporter&quot;;&#xA;    private final String BACKGROUND_JOB_EXPORTER = &quot;SnxBackgroundJobExporter&quot;;&#xA;    private final String BACKGROUND_JOB_IMPORTER = &quot;SnxBackgroundJobImporter&quot;;&#xA;    private final String TRUCK_ACTION_EXPORTER = &quot;SnxTruckActionExporter&quot;;&#xA;    private final String TRUCK_ACTION_IMPORTER = &quot;SnxTruckActionImporter&quot;;&#xA;    private final String PERSISTENT_RESOURCE_BUNDLE_IMPORTER = &quot;SnxPersistentResourceBundleImporter&quot;;&#xA;    private final String PERSISTENT_RESOURCE_BUNDLE_EXPORTER = &quot;SnxPersistentResourceBundleExporter&quot;;&#xA;    private final String CUSTOM_LOAD_REQUEST_CODE_MAPPING_IMPORTER = &quot;SnxCustomLoadRequestCodeMappingImporter&quot;;&#xA;    private final String CUSTOM_LOAD_REQUEST_CODE_MAPPING_EXPORTER = &quot;SnxCustomLoadRequestCodeMappingExporter&quot;;&#xA;    private final String NOTICE_REQUEST_IMPORTER = &quot;SnxNoticeRequestImporter&quot;;&#xA;    private final String ARGO_GROOVY_JOB_DEFINITION_EXPORTER = &quot;SnxArgoGroovyJobDefinitionExporter&quot;;&#xA;    private final String ARGO_GROOVY_JOB_DEFINITION_IMPORTER = &quot;SnxArgoGroovyJobDefinitionImporter&quot;;&#xA;    private final String GENERAL_REFERENCE_EXPORTER = &quot;SnxGeneralReferenceExporter&quot;;&#xA;    private final String GENERAL_REFERENCE_IMPORTER = &quot;SnxGeneralReferenceImporter&quot;;&#xA;    private final String JOB_CONFIGURATION_EXPORTER = &quot;SnxJobConfigurationExporter&quot;;&#xA;    private final String JOB_CONFIGURATION_IMPORTER = &quot;SnxJobConfigurationImporter&quot;;&#xA;    private final String CHASSIS_PROFILE_EXPORTER = &quot;SnxChassisProfileExporter&quot;;&#xA;    private final String CHASSIS_PROFILE_IMPORTER = &quot;SnxChassisProfileImporter&quot;;&#xA;    private final String ARGO_SEQUENCE_EXPORTER = &quot;SnxArgoSequenceExporter&quot;;&#xA;    private final String ARGO_SEQUENCE_IMPORTER = &quot;SnxArgoSequenceImporter&quot;;&#xA;    private final String CUSTOM_NODE_EXPORTER = &quot;SnxCustomNodeExporter&quot;;&#xA;    private final String CUSTOM_NODE_IMPORTER = &quot;SnxCustomNodeImporter&quot;;&#xA;    private final String BERTH_MODEL_EXPORTER = &quot;SnxBerthModelExporter&quot;;&#xA;    private final String BERTH_MODEL_IMPORTER = &quot;SnxBerthModelImporter&quot;;&#xA;    private final String BERTH_USER_RANGE_EXPORTER = &quot;SnxBerthUserRangeExporter&quot;;&#xA;    private final String BERTH_USER_RANGE_IMPORTER = &quot;SnxBerthUserRangeImporter&quot;;&#xA;    private final String WORKSTATION_EXPORTER = &quot;SnxWorkstationExporter&quot;;&#xA;    private final String WORKSTATION_IMPORTER = &quot;SnxWorkstationImporter&quot;;&#xA;    private final String CREDIT_CARD_READER_EXPORTER = &quot;SnxCreditCardReaderExporter&quot;;&#xA;    private final String CREDIT_CARD_READER_IMPORTER = &quot;SnxCreditCardReaderImporter&quot;;&#xA;    private final String TRADING_PARTNER_EXPORTER = &quot;SnxEdiTradingPartnerImporter&quot;;&#xA;    private final String TRADING_PARTNER_IMPORTER = &quot;SnxEdiTradingPartnerExporter&quot;;&#xA;    private final String EDISESSION_IMPORTER = &quot;SnxEdiSessionImporter&quot;;&#xA;    private final String HAZ_IMPORTER = &quot;SnxHazardousGoodsImporter&quot;;&#xA;    private final String HAZ_EXPORTER = &quot;SnxHazardousGoodsExporter&quot;;&#xA;    private final String EXTENSION_EXPORTER = &quot;SnxExtensionExporter&quot;;&#xA;    private final String EXTENSION_IMPORTER = &quot;SnxExtensionImporter&quot;;&#xA;}" />
</argo:snx>

