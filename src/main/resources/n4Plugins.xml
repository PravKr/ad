<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
    <extension name="SnxArgoGroovyJobDefinitionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoAssetsEntity&#xA;import com.navis.argo.ArgoAssetsField&#xA;import com.navis.argo.ArgoJobEntity&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.business.atoms.JobFrequencyEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.atoms.WeekdayEnum&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.argo.web.ArgoGuiMetafield&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.QuartzEntity&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.query.common.api.QueryResult&#xA;import com.navis.framework.util.ValueHolder&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.security.SecurityEntity&#xA;import com.navis.security.SecurityField&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;&#xA;/**&#xA; * SNX Exporter for the Groovy Job.&#xA; */&#xA;public class SnxArgoGroovyJobDefinitionExporter extends AbstractScopeAwareSnxExporter implements EBean {&#xA;&#xA;    SnxArgoGroovyJobDefinitionExporter() {&#xA;        super(null, null);&#xA;    }&#xA;&#xA;    protected SnxArgoGroovyJobDefinitionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace)&#xA;    }&#xA;&#xA;    @Override&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoJobEntity.ARGO_GROOVY_JOB_DEFINITION)&#xA;                .addDqField(ArgoJobField.JOBDEF_ID)&#xA;                .addDqField(ArgoJobField.JOBDEF_DESCRIPTION)&#xA;                .addDqField(ArgoJobField.JOBDEF_IS_CLUSTERED)&#xA;                .addDqField(ArgoJobField.JOBDEF_JOB_GROUP)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_SCOPE)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_CODE_TYPE)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_GROOVY_PLUGINS)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_CODE_EXTENSIONS)&#xA;                .addDqField(ArgoGuiMetafield.GRVJOB_BASE_USER)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_FREQUENCY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_WEEKDAYS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_LIFE_START_DATE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_LIFE_END_DATE)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_EXPRESSION)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_HOURS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MINUTES)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_REPEAT_COUNT)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS)&#xA;                .addDqField(ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;        return dq;&#xA;    }&#xA;&#xA;    @Override&#xA;    protected Element createOneEntityElement() {&#xA;        Element element = createElement(ArgoJobEntity.ARGO_GROOVY_JOB_DEFINITION);&#xA;&#xA;        Serializable userGkey = (Serializable) getProperty(ArgoGuiMetafield.GRVJOB_BASE_USER);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(SecurityEntity.BASE_USER)&#xA;                .addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_GKEY, userGkey))&#xA;                .addDqField(SecurityField.BUSER_UID);&#xA;        QueryResult result = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;        ValueHolder valueHolder = result.getValueHolder(result.getFirstResult());&#xA;        String userId = valueHolder != null ? valueHolder.getFieldValue(SecurityField.BUSER_UID) : null;&#xA;&#xA;        setAttributeFromField(element, ArgoJobField.JOBDEF_ID.getFieldId(), ArgoJobField.JOBDEF_ID);&#xA;        setAttributeFromField(element, ArgoJobField.JOBDEF_DESCRIPTION.getFieldId(), ArgoJobField.JOBDEF_DESCRIPTION);&#xA;        Serializable jogGroupGkey = (Serializable) getProperty(ArgoJobField.JOBDEF_JOB_GROUP);&#xA;        dq = QueryUtils.createDomainQuery(QuartzEntity.JOB_GROUP)&#xA;                .addDqPredicate(PredicateFactory.eq(QuartzField.JOBGROUP_GKEY, jogGroupGkey))&#xA;                .addDqField(QuartzField.JOBGROUP_NAME);&#xA;        result = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;        valueHolder = result.getValueHolder(result.getFirstResult());&#xA;        String jobGroupName = valueHolder != null ? valueHolder.getFieldValue(QuartzField.JOBGROUP_NAME) : null;&#xA;        setAttribute(element, ArgoJobField.JOBDEF_JOB_GROUP.getFieldId(), jobGroupName);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.GRVJOB_CODE_TYPE.getFieldId(), ArgoGuiMetafield.GRVJOB_CODE_TYPE);&#xA;        setAttribute(element, ArgoGuiMetafield.GRVJOB_BASE_USER.getFieldId(), userId);&#xA;        JobFrequencyEnum frequency = (JobFrequencyEnum) getProperty(ArgoGuiMetafield.JOBDEF_FREQUENCY);&#xA;        setAttribute(element,ArgoGuiMetafield.JOBDEF_FREQUENCY.getFieldId(), frequency)&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE.getFieldId(), ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH.getFieldId(),&#xA;                ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH.getFieldId(), ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY.getFieldId(), ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE.getFieldId(), ArgoGuiMetafield.JOBDEF_LIFE_START_DATE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE.getFieldId(), ArgoGuiMetafield.JOBDEF_LIFE_END_DATE);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_EXPRESSION.getFieldId(), ArgoGuiMetafield.JOBDEF_EXPRESSION);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_HOURS.getFieldId(), ArgoGuiMetafield.JOBDEF_HOURS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MINUTES.getFieldId(), ArgoGuiMetafield.JOBDEF_MINUTES);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT.getFieldId(), ArgoGuiMetafield.JOBDEF_REPEAT_COUNT);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX.getFieldId(), ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS.getFieldId(), ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS);&#xA;        setAttributeFromField(element, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX.getFieldId(), ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;&#xA;        String scopeGkey = (String) getProperty(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY);&#xA;        Long gkey = null;&#xA;        if (scopeGkey != null) {&#xA;            gkey = Long.parseLong(scopeGkey);&#xA;        }  &#xA;        ScopeEnum scopeLevel = (ScopeEnum) getProperty(ArgoGuiMetafield.GRVJOB_SCOPE);&#xA;        setOptionalAttribute(element, A_SCOPE, getScopePathName(gkey, scopeLevel));&#xA;&#xA;        appendWeekdaysElement(element);&#xA;        appendDaysOfMonthElement(element);&#xA;        appendCodeExtensionsElement(element);&#xA;        appendGroovyPluginsElement(element);&#xA;        return element&#xA;    }&#xA;&#xA;    private void appendWeekdaysElement(Element inGroovyJobElement) {&#xA;        List&lt;WeekdayEnum&gt; weekdays = (List&lt;WeekdayEnum&gt;) getProperty(ArgoGuiMetafield.JOBDEF_WEEKDAYS);&#xA;        Element weekdaysElement = createElement(E_WEEKDAYS);&#xA;&#xA;        if (weekdays != null) {&#xA;            for (WeekdayEnum weekdayEnum : weekdays) {&#xA;                Element element = createElement(E_WEEKDAY);&#xA;                element.setAttribute(A_NAME, weekdayEnum.getName());&#xA;                weekdaysElement.addContent(element);&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(weekdaysElement);&#xA;    }&#xA;&#xA;    private void appendDaysOfMonthElement(Element inGroovyJobElement) {&#xA;        List&lt;String&gt; daysOfMonth = (List&lt;String&gt;) getProperty(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH);&#xA;        Element daysOfMonthElement = createElement(E_DAYS_OF_MONTH);&#xA;&#xA;        if (daysOfMonth != null) {&#xA;            for (String day : daysOfMonth) {&#xA;                Element element = createElement(E_DAY);&#xA;                element.setAttribute(A_NAME, day);&#xA;                daysOfMonthElement.addContent(element);&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(daysOfMonthElement);&#xA;    }&#xA;&#xA;    private void appendCodeExtensionsElement(Element inGroovyJobElement) {&#xA;        Serializable[] codeExtensions = (Serializable[]) getProperty(ArgoGuiMetafield.GRVJOB_CODE_EXTENSIONS);&#xA;        Element codeExtensionsElement = createElement(E_CODE_EXTENSIONS);&#xA;&#xA;        if (codeExtensions != null) {&#xA;            for (int i=0; i&lt; codeExtensions.length; i++) {&#xA;                Serializable gkey = codeExtensions[i];&#xA;                DomainQuery dq = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                        .addDqPredicate(PredicateFactory.eq(ExtensionField.EXT_GKEY, gkey));&#xA;                dq.addDqField(ExtensionField.EXT_NAME);&#xA;                dq.setScopingEnabled(true);&#xA;                QueryResult queryResult = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;                List&lt;ValueObject&gt; results = queryResult.getRetrievedResults();&#xA;                if (results.size() == 1) {&#xA;                    ValueObject valueObject = results.first();&#xA;                    String name = valueObject.getFieldValue(ExtensionField.EXT_NAME);&#xA;                    Element element = createElement(E_CODE_EXTENSION);&#xA;                    element.setAttribute(A_NAME, name);&#xA;                    codeExtensionsElement.addContent(element);&#xA;                }&#xA;            }&#xA;        }&#xA;        inGroovyJobElement.addContent(codeExtensionsElement);&#xA;    }&#xA;&#xA;    private void appendGroovyPluginsElement(Element inGroovyJobElement) {&#xA;        Serializable[] groovyPlugins = (Serializable[]) getProperty(ArgoGuiMetafield.GRVJOB_GROOVY_PLUGINS);&#xA;        Element groovyPluginsElement = createElement(E_GROOVY_PLUGINS);&#xA;&#xA;        if (groovyPlugins != null) {&#xA;            for (int i=0; i&lt; groovyPlugins.length; i++) {&#xA;                Serializable gkey = groovyPlugins[i];&#xA;                DomainQuery dq = QueryUtils.createDomainQuery(ArgoAssetsEntity.DIGITAL_ASSET)&#xA;                        .addDqPredicate(PredicateFactory.eq(ArgoAssetsField.DA_GKEY, gkey));&#xA;                dq.addDqField(ArgoAssetsField.DA_ID);&#xA;                QueryResult queryResult = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xA;                List&lt;ValueObject&gt; results = queryResult.getRetrievedResults();&#xA;                if (results.size() == 1) {&#xA;                    ValueObject valueObject = results.first();&#xA;                    String name = valueObject.getFieldValue(ArgoAssetsField.DA_ID);&#xA;                    Element element = createElement(E_GROOVY_PLUGIN);&#xA;                    element.setAttribute(A_ID, name);&#xA;                    groovyPluginsElement.addContent(element);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        inGroovyJobElement.addContent(groovyPluginsElement);&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Exporter for Argo Groovy Job Definition&quot;;&#xA;    }&#xA;&#xA;    private static String E_WEEKDAYS = &quot;weekdays&quot;;&#xA;    private static String E_WEEKDAY = &quot;weekday&quot;;&#xA;&#xA;    private static String E_DAYS_OF_MONTH = &quot;daysOfMonth&quot;;&#xA;    private static String E_DAY = &quot;day&quot;;&#xA;&#xA;    private static String E_CODE_EXTENSIONS = &quot;codeExtensions&quot;;&#xA;    private static String E_CODE_EXTENSION = &quot;codeExtension&quot;;&#xA;&#xA;    private static String E_GROOVY_PLUGINS = &quot;groovyPlugins&quot;;&#xA;    private static String E_GROOVY_PLUGIN = &quot;groovyPlugin&quot;;&#xA;&#xA;    private static String A_NAME = &quot;name&quot;;&#xA;    private static String A_ID = &quot;id&quot;;&#xA;&#xA;    private static String A_SCOPE = &quot;scope&quot;;&#xA;}" />
    <extension name="SnxExtensionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.argo.business.snx.SnxExtensionBase&#xA;import com.navis.extension.invocation.dynamiccode.IExtension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.external.framework.util.ExtensionUtils&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.context.UserContextUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;/**&#xA; * Code taken from com.navis.argo.business.snx.SnxExtensionExporter;&#xA; * Added handling for extra field &quot;dependency&quot;&#xA; */&#xA;public class SnxExtensionExporter extends AbstractScopeAwareSnxExporter implements SnxExtensionBase, EBean {&#xA;&#xA;    private static final MetafieldId EXTENSIONFIELD_DEPENDENCY = MetafieldIdFactory.valueOf(&quot;extDependency&quot;);&#xA;&#xA;    private static final Logger logger = LoggerFactory.getLogger(SnxExtensionExporter.class);&#xA;&#xA;    public SnxExtensionExporter() {&#xA;        super((Map) null, (Namespace) null);&#xA;    }&#xA;&#xA;    protected SnxExtensionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace);&#xA;    }&#xA;&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery domainQuery = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                .addDqField(ExtensionField.EXT_SCOPE_LEVEL)&#xA;                .addDqField(ExtensionField.EXT_SCOPE_GKEY)&#xA;                .addDqField(ExtensionField.EXT_NAME)&#xA;                .addDqField(ExtensionField.EXT_TYPE)&#xA;                .addDqField(ExtensionField.EXT_LANG)&#xA;                .addDqField(ExtensionField.EXT_ENABLED)&#xA;                .addDqField(ExtensionField.EXT_SYS_SEEDED)&#xA;                .addDqField(ExtensionField.EXT_VERSION)&#xA;                .addDqField(ExtensionField.EXT_CONTENTS)&#xA;                .addDqField(ExtensionField.EXT_DESCRIPTION)&#xA;                .addDqField(EXTENSIONFIELD_DEPENDENCY)&#xA;                .setFullLeftOuterJoin(true);&#xA;        return domainQuery;&#xA;    }&#xA;&#xA;    protected Element createOneEntityElement() {&#xA;        Element extElement = this.createElement(&quot;extension&quot;);&#xA;        this.setAttributeFromField(extElement, &quot;name&quot;, ExtensionField.EXT_NAME);&#xA;        String scopeGkey = (String) this.getProperty(ExtensionField.EXT_SCOPE_GKEY);&#xA;        Long geky = null;&#xA;        if (scopeGkey != null) {&#xA;            geky = Long.parseLong(scopeGkey);&#xA;        }&#xA;&#xA;        Long scopeLevel = (Long) this.getProperty(ExtensionField.EXT_SCOPE_LEVEL);&#xA;        this.setOptionalAttribute(extElement, &quot;scope&quot;, this.getScopePathName(geky, scopeLevel));&#xA;        this.setOptionalAttributeFromField(extElement, &quot;type&quot;, ExtensionField.EXT_TYPE);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;language&quot;, ExtensionField.EXT_LANG);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;is-enabled&quot;, ExtensionField.EXT_ENABLED);&#xA;        this.setOptionalAttributeFromField(extElement, &quot;description&quot;, ExtensionField.EXT_DESCRIPTION);&#xA;        //HHLA customization&#xA;        this.setOptionalAttribute(extElement, &quot;dependency&quot;, getCodeExtensionNameFromGkey());&#xA;&#xA;        this.setOptionalAttributeFromField(extElement, &quot;contents&quot;, ExtensionField.EXT_CONTENTS);&#xA;&#xA;        byte[] contents = (byte[]) ((byte[]) this.getProperty(ExtensionField.EXT_CONTENTS));&#xA;        String contentStr = new String(contents);&#xA;        this.setAttribute(extElement, &quot;contents&quot;, contentStr);&#xA;        return extElement;&#xA;    }&#xA;&#xA;    private String getCodeExtensionNameFromGkey() {&#xA;        Long parentGkey = (Long) getProperty(EXTENSIONFIELD_DEPENDENCY);&#xA;&#xA;        if (parentGkey == null) {&#xA;            logger.trace(&quot;code extension has no parent code extension&quot;);&#xA;            return null;&#xA;        }&#xA;&#xA;        IExtension parentExtension = ExtensionUtils.getExtension(UserContextUtils.getSystemUserContext(), parentGkey);&#xA;        if (parentExtension == null) {&#xA;            logger.error(&quot;Unable to find parent extension with gkey &quot; + parentGkey);&#xA;            return null;&#xA;        }&#xA;&#xA;        return parentExtension.getExtensionName();&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;}" />
    <extension name="GenericExportProcessor" scope="OPR1" type="GROOVY_WS_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoAssetsField&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.ArgoReportsField&#xA;import com.navis.argo.business.snx.IEntityXmlExporter&#xA;import com.navis.argo.business.snx.SnxBase&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.edi.EdiField&#xA;import com.navis.external.argo.AbstractGroovyWSCodeExtension&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.portal.query.PredicateIntf&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.security.SecurityField&#xA;import com.navis.services.ServicesField&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; * This class is used to export SNX for Entities with built-in SNX Exporter and&#xA; * Entities without built-in SNX Exporter (Using Generic Exporter)&#xA; */&#xA;public class GenericExportProcessor extends AbstractGroovyWSCodeExtension {&#xA;&#xA;    /*public String execute() {&#xA;        return executeSnxExport(&quot;DigitalAsset&quot;);&#xA;    }*/&#xA;&#xA;    public String execute(Map&lt;String, Object&gt; inParams) {&#xA;        if(inParams == null){&#xA;            return &quot;Parameter not found in xml&quot;;&#xA;        }&#xA;&#xA;        String entityName = inParams.get(ENTITY_NAME_KEY);&#xA;        if(entityName == null) {&#xA;            return &quot;Entity name is Mandatory Parameter&quot;;&#xA;        }&#xA;&#xA;        String entityItem = inParams.get(ENTITY_ITEM_KEY);&#xA;        return exportSnxFromEntityExporter(entityName, formatEntityItemForSqlQuery(entityItem));&#xA;    }&#xA;&#xA;    private List&lt;String&gt; formatEntityItemForSqlQuery(String inEntityItem) {&#xA;        if(inEntityItem != null) {&#xA;            return inEntityItem.split(&quot;,&quot;).toList();&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    /**&#xA;     * Export the SNX from spcific entity exporter&#xA;     * @param inEntityName&#xA;     * @return String&#xA;     */&#xA;    private String exportSnxFromEntityExporter(String inEntityName, List&lt;String&gt; inEntityItem) {&#xA;        Element root = XmlUtil.createRootElement(SnxBase.E_ROOT, SnxBase.SNX_SCHEMA_URL);&#xA;        IEntityXmlExporter exporter = getSnxExporterForEntity(inEntityName);&#xA;        if (exporter == null) {&#xA;            LOGGER.error(&quot;Snx Exporter is null for entity :&quot; + inEntityName);&#xA;            return null;&#xA;        }&#xA;        exporter.setPrimaryKeys(findPrimaryKeysForEntity(inEntityName, inEntityItem));&#xA;        Iterator elementIterator = exporter.getElementIterator();&#xA;        while (elementIterator.hasNext()) {&#xA;            Element e = (Element) elementIterator.next();&#xA;            root.addContent(e);&#xA;        }&#xA;        String exportedXML = null;&#xA;        if (root != null) {&#xA;            exportedXML = XmlUtil.convertToString(root, true)&#xA;        }&#xA;&#xA;        return XmlUtil.ensureHeader(exportedXML); ;&#xA;    }&#xA;&#xA;    /**&#xA;     * Find PKs for entity&#xA;     * @param inEntityName&#xA;     * @return Serializable[]&#xA;     */&#xA;    private Serializable[] findPrimaryKeysForEntity(String inEntityName, List&lt;String&gt; inEntityItem) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(inEntityName);&#xA;        PredicateIntf filter = getFilterForEntity(inEntityName);&#xA;        if (filter != null) {&#xA;            dq.addDqPredicate(filter);&#xA;        }&#xA;        if(inEntityItem != null &amp;&amp; !inEntityItem.contains(&quot;All&quot;)) {&#xA;            dq.addDqPredicate(PredicateFactory.in(whereClauseMap.get(inEntityName), inEntityItem));&#xA;        }&#xA;&#xA;        MetafieldId gkeyField = getGkeyMetafieldForEntity(inEntityName);&#xA;        if (gkeyField != null) {&#xA;            dq.addDqOrdering(Ordering.asc(gkeyField));&#xA;        }&#xA;        return (Serializable[]) Roastery.getHibernateApi().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;    /**&#xA;     * Find PKs for entity&#xA;     * @param inEntityName&#xA;     * @return Serializable[]&#xA;     */&#xA;    private Serializable[] findPrimaryKeysForEntity(String inEntityName) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(inEntityName);&#xA;        PredicateIntf filter = getFilterForEntity(inEntityName);&#xA;        if (filter != null) {&#xA;            dq.addDqPredicate(filter);&#xA;        }&#xA;        MetafieldId gkeyField = getGkeyMetafieldForEntity(inEntityName);&#xA;        if (gkeyField != null) {&#xA;            dq.addDqOrdering(Ordering.asc(gkeyField));&#xA;        }&#xA;        return (Serializable[]) Roastery.getHibernateApi().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;    /**&#xA;     * Find Snx Exporter of Type IEntityXmlExporter&#xA;     * @param inEntityName&#xA;     * @return IEntityXmlExporter&#xA;     */&#xA;    private IEntityXmlExporter getSnxExporterForEntity(String inEntityName) {&#xA;        String exporterBeanName = getExporterBeanName(inEntityName);&#xA;        if (!Roastery.containsBean(exporterBeanName)) {&#xA;            throw BizFailure.create(&quot;No Exporter found for &quot; + inEntityName + &quot;. Expected a bean named &lt;&quot; + exporterBeanName + &quot;&gt;&quot;);&#xA;        }&#xA;        Object bean = Roastery.getBean(exporterBeanName);&#xA;        if (!(bean instanceof IEntityXmlExporter)) {&#xA;            throw BizFailure.create(&quot;Exporter &lt;&quot; + exporterBeanName + &quot;&gt; needs to be refactored per ARGO-7012&quot;);&#xA;        }&#xA;        return (IEntityXmlExporter) bean;&#xA;    }&#xA;&#xA;    private PredicateIntf getFilterForEntity(String inEntityName) {&#xA;        MetafieldId filterField = filterKeyMap.get(inEntityName)&#xA;        if (filterField != null) {&#xA;            LOGGER.info(&quot;Found the filter key for entity :&quot;+inEntityName);&#xA;            return PredicateFactory.eq(filterField, Boolean.FALSE)&#xA;        }&#xA;&#xA;        return null;&#xA;    }&#xA;&#xA;    private MetafieldId getGkeyMetafieldForEntity(String inEntityName) {&#xA;        return entityGkeyMap.get(inEntityName);&#xA;    }&#xA;&#xA;    /**&#xA;     *  Find Exporter Bean name for Entity&#xA;     * @param inEntityName&#xA;     * @return String&#xA;     */&#xA;    private String getExporterBeanName(String inEntityName) {&#xA;        return SNX_BEAN_PREFIX + inEntityName + SNX_EXPORTER_BEAN_SUFFIX;&#xA;    }&#xA;&#xA;    //Initialize the list of entity and its metafield gkey&#xA;    static {&#xA;        entityGkeyMap.put(&quot;JobGroup&quot;, QuartzField.JOBGROUP_GKEY);&#xA;        entityGkeyMap.put(&quot;HoldPermissionView&quot;, ServicesField.HPV_GKEY);&#xA;        entityGkeyMap.put(&quot;DbVariformFileDefinition&quot;, ConfigSettingField.CFGVAR_GKEY);&#xA;    }&#xA;&#xA;    //Initialize the list of entities and its BUILT_IN meta field ids&#xA;    static {&#xA;        filterKeyMap.put(&quot;ReportableEntity&quot;, ArgoReportsField.REPENT_IS_BUILT_IN);&#xA;        filterKeyMap.put(&quot;DigitalAsset&quot;, ArgoAssetsField.DA_PRE_DEPLOYED);&#xA;        filterKeyMap.put(&quot;Extension&quot;, ExtensionField.EXT_SYS_SEEDED);&#xA;        filterKeyMap.put(&quot;ArgoSecRole&quot;, SecurityField.ROLE_IS_DELEGATED);&#xA;    }&#xA;&#xA;    static {&#xA;        whereClauseMap.put(&quot;DbVariformFileDefinition&quot;, ExtensionField.EXT_GKEY);&#xA;        whereClauseMap.put(&quot;EventType&quot;, ServicesField.EVNTTYPE_GKEY);&#xA;        whereClauseMap.put(&quot;DbMetafield&quot;, ConfigSettingField.MFDO_GKEY);&#xA;        whereClauseMap.put(&quot;DigitalAsset&quot;, ArgoAssetsField.DA_GKEY);&#xA;        whereClauseMap.put(&quot;DbVariformFileDefinition&quot;, ConfigSettingField.CFGVAR_GKEY);&#xA;        whereClauseMap.put(&quot;ExtensionInjection&quot;, ExtensionField.EXTINJ_GKEY);&#xA;        whereClauseMap.put(&quot;NoticeRequest&quot;, ServicesField.NOTICE_GKEY);&#xA;        whereClauseMap.put(&quot;EdiSession&quot;, EdiField.EDISESS_GKEY);&#xA;        whereClauseMap.put(&quot;EdiMailbox&quot;, EdiField.EDIMLBX_GKEY);&#xA;        whereClauseMap.put(&quot;EdiMessageType&quot;, EdiField.EDIMSG_GKEY);&#xA;        whereClauseMap.put(&quot;ArgoGroovyJobDefinition&quot;, ArgoJobField.JOBDEF_GKEY);&#xA;        whereClauseMap.put(&quot;GeneralReference&quot;, ArgoField.REF_GKEY);&#xA;        whereClauseMap.put(&quot;Extension&quot;, ExtensionField.EXT_GKEY);&#xA;    }&#xA;&#xA;    private static HashMap&lt;String, MetafieldId&gt; entityGkeyMap = new HashMap&lt;&gt;();&#xA;    private static HashMap&lt;String, MetafieldId&gt; filterKeyMap = new HashMap&lt;&gt;();&#xA;&#xA;    private final static String SNX_BEAN_PREFIX = &quot;snx&quot;;&#xA;    private final static String SNX_EXPORTER_BEAN_SUFFIX = &quot;Exporter&quot;;&#xA;    private final static String ENTITY_NAME_KEY = &quot;entity-name&quot;;&#xA;    private final static String ENTITY_ITEM_KEY = &quot;entity-item&quot;&#xA;    private static HashMap&lt;String, MetafieldId&gt; whereClauseMap = new HashMap&lt;&gt;();&#xA;    private static final Logger LOGGER = Logger.getLogger(GenericExportProcessor.class);&#xA;}&#xA;" />
    <extension name="SnxExtensionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.model.Operator&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.argo.business.snx.SnxExtensionBase&#xA;import com.navis.extension.business.Extension&#xA;import com.navis.extension.invocation.dynamiccode.IExtension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ExtensionEntity&#xA;import com.navis.framework.ExtensionField&#xA;import com.navis.framework.business.atoms.ExtensionLanguageEnum&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizViolation&#xA;import org.jdom.Element&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;/**&#xA; * Code taken from com.navis.argo.business.snx.SnxExtensionImporter;&#xA; * Added handling for extra field &quot;dependency&quot;&#xA; */&#xA;public class SnxExtensionImporter extends AbstractScopeAwareSnxImporter implements SnxExtensionBase, EBean {&#xA;&#xA;    private static final MetafieldId EXTENSIONFIELD_DEPENDENCY = MetafieldIdFactory.valueOf(&quot;extDependency&quot;);&#xA;&#xA;    private static final Logger logger = LoggerFactory.getLogger(SnxExtensionImporter.class);&#xA;&#xA;    public SnxExtensionImporter() {&#xA;    }&#xA;&#xA;    public void parseElement(Element inElement) throws BizViolation {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap();&#xA;        String extName = this.getRequiredAttributeStringValue(inElement, &quot;name&quot;);&#xA;        String scope = this.getOptionalAttributeString(inElement, &quot;scope&quot;, (String) null);&#xA;        identifierMap.put(&quot;name&quot;, extName);&#xA;        if (scope == null) {&#xA;            identifierMap.put(&quot;scope&quot;, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(&quot;scope&quot;, scope);&#xA;        }&#xA;&#xA;        this.recordIdentifier(inElement, identifierMap);&#xA;        //qualified reference is necessary here&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = this.getScopeInfo(scope, &quot;scope&quot;);&#xA;        String contentStr = this.getRequiredAttributeStringValue(inElement, &quot;contents&quot;);&#xA;        String extType = this.getRequiredAttributeStringValue(inElement, &quot;type&quot;);&#xA;        ExtensionLanguageEnum langEnum = (ExtensionLanguageEnum) this.getRequiredAttributeValue(inElement, &quot;language&quot;, ExtensionLanguageEnum.class);&#xA;        Extension ext = Extension.createOrUpdateAtGivenScope(extName, langEnum, extType, contentStr.getBytes(), this.getScopeCoordinates(scopeInfo));&#xA;        this.setOptionalStringProperty(inElement, &quot;description&quot;, ext, ExtensionField.EXT_DESCRIPTION);&#xA;        this.setOptionalBooleanProperty(inElement, &quot;is-enabled&quot;, ext, ExtensionField.EXT_ENABLED);&#xA;        setGkeyOfParentCodeExtension(getOptionalAttributeString(inElement, &quot;dependency&quot;, (String) null), ext);&#xA;    }&#xA;&#xA;    protected Operator findOperator(String inOprId) throws BizViolation {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Operator&quot;).addDqPredicate(PredicateFactory.eq(ArgoField.OPR_ID, inOprId));&#xA;        dq.setScopingEnabled(false);&#xA;        Operator opr = (Operator) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;        if (opr == null) {&#xA;            throw badReference(&quot;Operator&quot;, inOprId);&#xA;        } else {&#xA;            return opr;&#xA;        }&#xA;    }&#xA;&#xA;    private void setGkeyOfParentCodeExtension(String parentCodeExtensionName, Extension extension) {&#xA;        if (parentCodeExtensionName != null) {&#xA;            Long gkey = getGKeyOfCodeExtensionWithName(parentCodeExtensionName);&#xA;            if (gkey == null) {&#xA;                logger.error(&quot;Gkey not found: Unable to set parent code extension with name &quot; + parentCodeExtensionName + &quot; for code extension &quot; + extension.getExtensionName());&#xA;                return;&#xA;            }&#xA;            extension.setFieldValue(EXTENSIONFIELD_DEPENDENCY, gkey);&#xA;        }&#xA;        else {&#xA;            extension.setFieldValue(EXTENSIONFIELD_DEPENDENCY, null);&#xA;        }&#xA;    }&#xA;&#xA;    private Long getGKeyOfCodeExtensionWithName(String codeExtensionName) {&#xA;        DomainQuery domainQuery = QueryUtils.createDomainQuery(ExtensionEntity.EXTENSION)&#xA;                .addDqPredicate(PredicateFactory.eq(ExtensionField.EXT_NAME, codeExtensionName));&#xA;&#xA;        try {&#xA;            IExtension extension = (IExtension) HibernateApi.getInstance().getUniqueEntityByDomainQuery(domainQuery);&#xA;            if (extension==null) {&#xA;                logger.error(&quot;Unable to find code extension with name &quot;+codeExtensionName);&#xA;                return null;&#xA;            }&#xA;            return extension.getUniqueKey();&#xA;        }&#xA;        catch (BizViolation bv) {&#xA;            logger.error(&quot;Found more than one extension with name &quot; + codeExtensionName + &quot;: &quot; + bv.toString());&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;}" />
    <extension name="SnxArgoGroovyJobDefinitionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoJobField&#xA;import com.navis.argo.business.atoms.CustomJobTypeEnum&#xA;import com.navis.argo.business.atoms.JobFrequencyEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.job.ArgoGroovyJobDefinition&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.argo.web.ArgoGuiMetafield&#xA;import com.navis.extension.business.Extension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.QuartzEntity&#xA;import com.navis.framework.QuartzField&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.quartz.business.JobGroup&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.security.SecurityEntity&#xA;import com.navis.security.SecurityField&#xA;import com.navis.security.business.user.BaseUser&#xA;import org.jdom.Element&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;&#xA;public class SnxArgoGroovyJobDefinitionImporter extends AbstractScopeAwareSnxImporter implements EBean {&#xA;    private static final Logger LOGGER = LoggerFactory.getLogger(SnxArgoGroovyJobDefinitionImporter.class);&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        String id = getRequiredAttributeStringValue(inElement, ArgoJobField.JOBDEF_ID.getFieldId());&#xA;        LOGGER.info(&quot;&gt;parseElement id={}&quot;, id);&#xA;        recordIdentifier(inElement, id);&#xA;&#xA;        ArgoGroovyJobDefinition groovyJobDefinition = (ArgoGroovyJobDefinition) ArgoGroovyJobDefinition.findById(id)&#xA;        LOGGER.info(&quot;findGroovyJobDefinition groovyJobDefiniton={}&quot;, groovyJobDefinition);&#xA;        if (groovyJobDefinition == null) {&#xA;            groovyJobDefinition = new ArgoGroovyJobDefinition();&#xA;            groovyJobDefinition.setFieldValue(ArgoJobField.JOBDEF_ID, id);&#xA;            String userId = getOptionalAttributeString(inElement, ArgoGuiMetafield.GRVJOB_BASE_USER.getFieldId(), null);&#xA;            if (userId != null) {&#xA;                BaseUser user = findBaseUser(userId);&#xA;                if (user != null) {&#xA;                    groovyJobDefinition.setFieldValue(ArgoJobField.GRVJOB_BASE_USER, user.getBuserGkey());&#xA;                }&#xA;            }&#xA;            LOGGER.info(&quot;saveGroovyJobDefinition groovyJobDefinition={}&quot;, groovyJobDefinition);&#xA;            HibernateApi.getInstance().save(groovyJobDefinition);&#xA;        }&#xA;&#xA;        setOptionalProperty(inElement, ArgoJobField.JOBDEF_DESCRIPTION.getFieldId(), groovyJobDefinition, ArgoJobField.JOBDEF_DESCRIPTION);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MONTHLY_OCCURRENCE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_ON_LAST_DEFINED_WEEKDAY_OF_MONTH);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_AT_LAST_DAY_OF_MONTH);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_IS_ON_CLOSEST_WORKDAY);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_LIFE_START_DATE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_LIFE_END_DATE);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_EXPRESSION.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_EXPRESSION);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_HOURS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_HOURS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MINUTES.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MINUTES);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_HOUR);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_MIN);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_INTERVAL_DAY);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_REPEAT_COUNT);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_SUBJECT);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_RECEIVER_ADDRESS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_MESSAGE_PREFIX);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_RECEIVER_ADDRESS);&#xA;        setOptionalProperty(inElement, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX.getFieldId(), groovyJobDefinition, ArgoGuiMetafield.JOBDEF_ERROR_MESSAGE_PREFIX);&#xA;&#xA;        FieldChanges fieldChanges = new FieldChanges()&#xA;&#xA;        String frequency = getOptionalAttributeString(inElement, ArgoJobField.JOBDEF_FREQUENCY.getFieldId(), null)&#xA;        JobFrequencyEnum frequencyEnum = JobFrequencyEnum.getEnum(frequency);&#xA;        fieldChanges.setFieldChange(ArgoJobField.JOBDEF_FREQUENCY, frequencyEnum);&#xA;&#xA;        String jobGroupName = getOptionalAttributeString(inElement, ArgoJobField.JOBDEF_JOB_GROUP.getFieldId(), null);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(QuartzEntity.JOB_GROUP)&#xA;                .addDqPredicate(PredicateFactory.eq(QuartzField.JOBGROUP_NAME, jobGroupName));&#xA;        JobGroup jobGroup = (JobGroup) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;&#xA;        String jobType = getOptionalAttributeString(inElement, ArgoGuiMetafield.GRVJOB_CODE_TYPE.getFieldId(), null);&#xA;        CustomJobTypeEnum jobTypeEnum = CustomJobTypeEnum.getEnum(jobType);&#xA;&#xA;        fieldChanges.setFieldChange(ArgoJobField.JOBDEF_JOB_GROUP, jobGroup);&#xA;        fieldChanges.setFieldChange(ArgoJobField.GRVJOB_CODE_TYPE, jobTypeEnum);&#xA;&#xA;        // Create a FieldChanges&#xA;&#xA;        setScope(inElement, groovyJobDefinition, fieldChanges);&#xA;&#xA;        parseWeekdaysElement(inElement, fieldChanges, groovyJobDefinition);&#xA;        parseDaysOfMonthElement(inElement, fieldChanges, groovyJobDefinition);&#xA;        parseCodeExtensionsElement(inElement, fieldChanges, groovyJobDefinition);&#xA;&#xA;        groovyJobDefinition.applyFieldChanges(fieldChanges);&#xA;    }&#xA;&#xA;    private BaseUser findBaseUser(String userId) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(SecurityEntity.BASE_USER)&#xA;                .addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_UID, userId));&#xA;        dq.setScopingEnabled(false);&#xA;        return HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private void setScope(Element inElement, ArgoGroovyJobDefinition inGroovyJobDefinition, FieldChanges inOutFieldChanges) {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap&lt;&gt;();&#xA;        String scope = getOptionalAttributeString(inElement, A_SCOPE, null);&#xA;        if (scope == null) {&#xA;            identifierMap.put(A_SCOPE, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(A_SCOPE, scope);&#xA;        }&#xA;        recordIdentifier(inElement, identifierMap);&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = getScopeInfo(scope, A_SCOPE);&#xA;        ScopeCoordinates scopeCoordinates = getScopeCoordinates(scopeInfo);&#xA;&#xA;        if (scopeCoordinates != null) {&#xA;            FieldChanges fieldChanges = new FieldChanges();&#xA;            if (scopeCoordinates.isScopeGlobal()) {&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE, ScopeEnum.GLOBAL);&#xA;            } else {&#xA;                int scopeLevel = scopeCoordinates.getMaxScopeLevel();&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE, scopeInfo.getScopeEnum());&#xA;                inOutFieldChanges.setFieldChange(ArgoGuiMetafield.GRVJOB_SCOPE_GKEY, scopeCoordinates.getScopeLevelCoord(scopeLevel));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private void parseWeekdaysElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob) {&#xA;        List&lt;Element&gt; alLWeekdays = inGroovyJobElement.getChildren(E_WEEKDAYS, inGroovyJobElement.getNamespace());&#xA;        if (alLWeekdays == null || alLWeekdays.size() == 0) {&#xA;            return;&#xA;        }&#xA;        List&lt;Element&gt; weekdays = alLWeekdays.first().getChildren(E_WEEKDAY);&#xA;        if (weekdays == null || weekdays.size() == 0) {&#xA;            return;&#xA;        }&#xA;&#xA;        String[] weekdayEnums = new String[weekdays.size()];&#xA;        for (int i = 0; i &lt; weekdays.size(); i++) {&#xA;            Element weekday = weekdays.get(i);&#xA;            weekdayEnums[i] = weekday.getAttributeValue(A_NAME);&#xA;        }&#xA;&#xA;        inOutFieldChanges.setFieldChange(ArgoGuiMetafield.JOBDEF_WEEKDAYS, weekdayEnums);&#xA;    }&#xA;&#xA;    private void parseDaysOfMonthElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob) {&#xA;        List&lt;Element&gt; daysOfMonth = inGroovyJobElement.getChildren(E_DAYS_OF_MONTH, inGroovyJobElement.getNamespace());&#xA;        if (daysOfMonth == null || daysOfMonth.size() == 0) {&#xA;            return;&#xA;        }&#xA;        List&lt;Element&gt; dayElements = daysOfMonth.first().getChildren(E_DAY);&#xA;        if (dayElements == null || dayElements.size() == 0) {&#xA;            return;&#xA;        }&#xA;&#xA;        String[] days = new String[dayElements.size()];&#xA;        for (int i = 0; i &lt; dayElements.size(); i++) {&#xA;            Element weekday = dayElements.get(i);&#xA;            days[i] = weekday.getAttributeValue(A_NAME);&#xA;        }&#xA;&#xA;        inOutFieldChanges.setFieldChange(ArgoGuiMetafield.JOBDEF_DAYS_OF_MONTH, days);&#xA;    }&#xA;&#xA;    private void parseCodeExtensionsElement(Element inGroovyJobElement, FieldChanges inOutFieldChanges, ArgoGroovyJobDefinition inGroovyJob)&#xA;            throws BizViolation {&#xA;        List&lt;Element&gt; allCodeExtensions = inGroovyJobElement.getChildren(E_CODE_EXTENSIONS, inGroovyJobElement.getNamespace());&#xA;        Set&lt;Extension&gt; result = new HashSet();&#xA;        if (allCodeExtensions != null) {&#xA;            List&lt;Element&gt; codeExtensions = allCodeExtensions.first().getChildren(E_CODE_EXTENSION);&#xA;            for (Element extension : codeExtensions) {&#xA;                String name = getRequiredAttributeStringValue(extension, A_NAME);&#xA;                List&lt;Extension&gt; extensions = Extension.findExtensions(name);&#xA;                if (extensions == null || extensions.size() == 0) {&#xA;                    LOGGER.error(&quot;Could not find code extension with name=&quot; + name);&#xA;                } else if (extensions.size() &gt; 1) {&#xA;                    LOGGER.error(&quot;Found more then one code extension with the name=&quot; + name);&#xA;                } else {&#xA;                    result.add(extensions.first());&#xA;                }&#xA;            }&#xA;            inOutFieldChanges.setFieldChange(ArgoJobField.GRVJOB_CODE_EXTENSIONS, result);&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Importer for Argo Groovy Job Definition&quot;;&#xA;    }&#xA;&#xA;    private static String E_WEEKDAYS = &quot;weekdays&quot;;&#xA;    private static String E_WEEKDAY = &quot;weekday&quot;;&#xA;&#xA;    private static String E_DAYS_OF_MONTH = &quot;daysOfMonth&quot;;&#xA;    private static String E_DAY = &quot;day&quot;;&#xA;&#xA;    private static String E_CODE_EXTENSIONS = &quot;codeExtensions&quot;;&#xA;    private static String E_CODE_EXTENSION = &quot;codeExtension&quot;;&#xA;&#xA;    private static String E_GROOVY_PLUGINS = &quot;groovyPlugins&quot;;&#xA;    private static String E_GROOVY_PLUGIN = &quot;groovyPlugin&quot;;&#xA;&#xA;    private static String A_NAME = &quot;name&quot;;&#xA;    private static String A_ID = &quot;id&quot;;&#xA;&#xA;    private static String A_SCOPE = &quot;scope&quot;;&#xA;}" />
    <extension name="SnxGeneralReferenceImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.snx.AbstractSnxEntityImporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import org.jdom.Element&#xA;&#xA;public class SnxGeneralReferenceImporter extends AbstractSnxEntityImporter implements EBean {&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        recordIdentifier(inElement, ArgoField.REF_TYPE.getFieldId());&#xA;&#xA;        String type = getRequiredAttributeStringValue(inElement, ArgoField.REF_TYPE.getFieldId());&#xA;        String id1 = getRequiredAttributeStringValue(inElement, ArgoField.REF_ID1.getFieldId());&#xA;        String id2 = getOptionalAttributeString(inElement, ArgoField.REF_ID2.getFieldId(), null);&#xA;        String id3 = getOptionalAttributeString(inElement, ArgoField.REF_ID3.getFieldId(), null);&#xA;&#xA;        String value1 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE1.getFieldId(), String.class, null);&#xA;        String value2 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE2.getFieldId(), String.class, null);&#xA;        String value3 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE3.getFieldId(), String.class, null);&#xA;        String value4 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE4.getFieldId(), String.class, null);&#xA;        String value5 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE5.getFieldId(), String.class, null);&#xA;        String value6 = getOptionalAttributeValue(inElement, ArgoField.REF_VALUE6.getFieldId(), String.class, null);&#xA;&#xA;        FieldChanges fieldChanges = new FieldChanges();&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE1, value1);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE2, value2);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE3, value3);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE4, value4);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE5, value5);&#xA;        fieldChanges.setFieldChange(ArgoField.REF_VALUE6, value6);&#xA;&#xA;        String userId = ContextHelper.getThreadUserId();&#xA;&#xA;        GeneralReference generalReference = GeneralReference.findUniqueEntryById(type, id1, id2, id3);&#xA;&#xA;        if (generalReference == null) {&#xA;            generalReference = GeneralReference.createOrUpdate(type, id1, id2, id3, value1, value2, value3, value4, value5, value6);&#xA;            generalReference.setFieldValue(ArgoField.REF_CREATED, TimeUtils.getCurrentTime());&#xA;            if (userId != null) {&#xA;                generalReference.setFieldValue(ArgoField.REF_CREATOR, userId);&#xA;            }&#xA;            HibernateApi.getInstance().save(generalReference);&#xA;        }&#xA;&#xA;        generalReference.applyFieldChanges(fieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Importer for General Reference&quot;;&#xA;    }&#xA;}" />
    <extension name="GenericImportProcessor" scope="OPR1" type="GROOVY_WS_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2020 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.external.argo.AbstractGroovyWSCodeExtension&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Document&#xA;import org.jdom.Element&#xA;import org.jdom.input.SAXBuilder&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.snx.ISnxImporter&#xA;import com.navis.argo.business.snx.SnxUtil&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.internationalization.UserMessage&#xA;import com.navis.framework.util.message.MessageCollector&#xA;&#xA;/*&#xA; * GenericImportProcessor&#xA; *&#xA; * @author &lt;a href=&quot;mailto:pravin.kumar@navis.com&quot;&gt;Pravin Kumar&lt;/a&gt;&#xA; *&#xA; * Date: 15-07-2020&#xA; *&#xA; * Called from: AD Tool&#xA; *&#xA; * Description: This class is used to import SNX for Entities with built-in SNX Importer&#xA; *&#xA;*/&#xA;public class GenericImportProcessor extends AbstractGroovyWSCodeExtension {&#xA;&#xA;&#xA;&#x9;private boolean _lastImportSuccessful;&#xA;&#xA;&#x9;public String execute(Map&lt;String, Object&gt; inParams) {&#xA;&#x9;&#x9;if(inParams == null){&#xA;&#x9;&#x9;&#x9;return &quot;Parameter not found in xml&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String snxValue = inParams.get(SNX_VALUE_KEY);&#xA;&#x9;&#x9;if(snxValue == null) {&#xA;&#x9;&#x9;&#x9;return &quot;Snx Value is Mandatory Parameter&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;byte[] actualByte = Base64.getDecoder()&#xA;&#x9;&#x9;&#x9;&#x9;.decode(snxValue);&#xA;&#xA;&#x9;&#x9;snxValue = new String(actualByte);&#xA;&#xA;&#x9;&#x9;return executeSnxImport(snxValue);&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Import snx xml&#xA;&#x9; * @param inSnxXML&#xA;&#x9; * @return response String&#xA;&#x9; */&#xA;&#x9;public String executeSnxImport(String inSnxXML) {&#xA;&#x9;&#x9;StringBuilder responseBuilder = new StringBuilder();&#xA;&#x9;&#x9;_lastImportSuccessful=false;&#xA;&#x9;&#x9;if (inSnxXML == null) {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;SNX not found!&quot;)&#xA;&#x9;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;Document snxDocument = parseXmlDocument(inSnxXML);&#xA;&#x9;&#x9;if (snxDocument == null) {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;Error in parsing SNX-XML document!&quot;);&#xA;&#x9;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;UserContext currentUserContext = ContextHelper.getThreadUserContext();&#xA;&#xA;&#x9;&#x9;MessageCollector messageCollector = importSnxElement(snxDocument, currentUserContext);&#xA;&#x9;&#x9;if (messageCollector != null &amp;&amp; messageCollector.hasError()) {&#xA;&#x9;&#x9;&#x9;List&lt;UserMessage&gt; messages = messageCollector.getMessages();&#xA;&#x9;&#x9;&#x9;for (final UserMessage eachMessage : messages) {&#xA;&#x9;&#x9;&#x9;&#x9;responseBuilder.append(eachMessage.getSeverity().toString() + &quot; &quot; + eachMessage.getMessageKey().getKey() + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;responseBuilder.append(&quot;Import successful!&quot;);&#xA;&#x9;&#x9;&#x9;_lastImportSuccessful=true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//Revert the user context values to the thread user context&#xA;&#x9;&#x9;TransactionParms.getBoundParms().setUserContext(currentUserContext);&#xA;&#x9;&#x9;return responseBuilder.toString();&#xA;&#x9;}&#xA;&#xA;&#x9;public wasLastImportSuccessful(){&#xA;&#x9;&#x9;return _lastImportSuccessful;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * Parse xml document from String to org.jdom.Document&#xA;&#x9; * @param String snxXmlDocument&#xA;&#x9; * @return org.jdom.Document&#xA;&#x9; */&#xA;&#x9;private Document parseXmlDocument(String inSnxXmlDocument) {&#xA;&#x9;&#x9;SAXBuilder builder = new SAXBuilder();&#xA;&#x9;&#x9;Document document = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;document = builder.build(new StringReader(inSnxXmlDocument));&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Error parsing xml document&quot;, e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return document;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Import SNX Element&#xA;&#x9; * @param org.jdom.Document&#xA;&#x9; * @param UserContext&#xA;&#x9; * @return MessageCollector&#xA;&#x9; */&#xA;&#x9;private MessageCollector importSnxElement(Document inSnx, UserContext inUc) {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;PersistenceTemplate pt = new PersistenceTemplate(inUc);&#xA;&#x9;&#x9;&#x9;Element rootElement = inSnx.getRootElement();&#xA;&#xA;&#x9;&#x9;&#x9;List&lt;Element&gt; children = rootElement.getChildren();&#xA;&#x9;&#x9;&#x9;if (children == null || children.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;//Import file is empty&#xA;&#x9;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;ISnxImporter importer;&#xA;&#x9;&#x9;&#x9;for (Element element : children) {&#xA;&#x9;&#x9;&#x9;&#x9;String entityName = element.getName();&#xA;&#x9;&#x9;&#x9;&#x9;importer = getSnxImporterForElement(entityName);&#xA;&#x9;&#x9;&#x9;&#x9;if (importer == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Can not find the SnxImporter for Element: &quot; + entityName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CarinaPersistenceCallback callback = new CarinaPersistenceCallback() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;@Override&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;protected void doInTransaction() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;importer.setScopeParameters();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ContextHelper.setThreadDataSource(DataSourceEnum.SNX);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;importer.parseElement(element);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception inEx) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TransactionParms parms = TransactionParms.getBoundParms();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MessageCollector msgCollector = parms.getMessageCollector();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (msgCollector != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;msgCollector.registerExceptions(inEx);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;&#x9;&#x9;pt.invoke(callback);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} catch (Exception inEx) {&#xA;&#x9;&#x9;&#x9;throw BizFailure.create(&quot;SNX Import failed: &quot; + inEx);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Find SnxImporter for given element name&#xA;&#x9; * @param String elementName&#xA;&#x9; * @return&#xA;&#x9; */&#xA;&#x9;private ISnxImporter getSnxImporterForElement(String inElementName) {&#xA;&#x9;&#x9;ISnxImporter importer;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;importer = SnxUtil.getSnxImporterForElement(inElementName);&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;throw BizFailure.create(&quot;Could not find Importer: &quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return importer;&#xA;&#x9;}&#xA;&#xA;&#x9;private final static String SNX_VALUE_KEY = &quot;entity-name&quot;;&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(GenericImportProcessor.class);&#xA;}" />
    <extension name="SnxDbVariformFileDefinitionExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxExporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ConfigSettingEntity&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import org.jdom.Element&#xA;import org.jdom.Namespace&#xA;&#xA;/**&#xA; * Created by kalimka on 01.08.2017.&#xA; */&#xA;public class SnxDbVariformFileDefinitionExporter extends AbstractScopeAwareSnxExporter implements EBean {&#xA;&#xA;    public SnxDbVariformFileDefinitionExporter() {&#xA;        super(null, null);&#xA;    }&#xA;    /**&#xA;     * Constructor.&#xA;     *&#xA;     * @param inTranslations a Map providing code translations from the QueryResult data to the XML file.  The key is the XML attribute tag +&#xA;     *                       QueryResult value.  Null is OK.&#xA;     * @param inNamespace Namespace for XML tags.  Null is OK.&#xA;     */&#xA;    protected SnxDbVariformFileDefinitionExporter(Map inTranslations, Namespace inNamespace) {&#xA;        super(inTranslations, inNamespace)&#xA;    }&#xA;&#xA;    @Override&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ConfigSettingEntity.DB_VARIFORM_FILE_DEFINITION)&#xA;                .addDqField(ConfigSettingField.CFGVAR_NAME)&#xA;                .addDqField(ConfigSettingField.CFGVAR_DESCRIPTION)&#xA;                .addDqField(ConfigSettingField.CFGVAR_ENABLED)&#xA;                .addDqField(ConfigSettingField.CFGVAR_VARIFORM_XML)&#xA;                .addDqField(ConfigSettingField.CFGVAR_VARIFORM_IDS)&#xA;                .addDqField(ConfigSettingField.CFGVAR_SCOPE_LEVEL)&#xA;                .addDqField(ConfigSettingField.CFGVAR_SCOPE_GKEY)&#xA;                .addDqField(ConfigSettingField.CFGVAR_CREATOR)&#xA;                .addDqField(ConfigSettingField.CFGVAR_CHANGED);&#xA;        return dq;&#xA;    }&#xA;&#xA;    @Override&#xA;    protected Element createOneEntityElement() {&#xA;        Element dbVariformElement = createElement(DBVARIFORM);&#xA;&#xA;        setAttributeFromField(dbVariformElement, NAME, ConfigSettingField.CFGVAR_NAME);&#xA;        setAttributeFromField(dbVariformElement, DESCRIPTION, ConfigSettingField.CFGVAR_DESCRIPTION);&#xA;        setAttributeFromField(dbVariformElement, ENABLED, ConfigSettingField.CFGVAR_ENABLED);&#xA;        setAttributeFromField(dbVariformElement, VARIFORM_XML, ConfigSettingField.CFGVAR_VARIFORM_XML);&#xA;        setAttributeFromField(dbVariformElement, VARIFORM_IDS, ConfigSettingField.CFGVAR_VARIFORM_IDS);&#xA;&#xA;        String scopeGkey = (String) getProperty(ConfigSettingField.CFGVAR_SCOPE_GKEY);&#xA;        Long gkey = null;&#xA;        if (scopeGkey != null) {&#xA;            gkey = Long.parseLong(scopeGkey);&#xA;        }&#xA;        Long scopeLevel = (Long) getProperty(ConfigSettingField.CFGVAR_SCOPE_LEVEL);&#xA;        setOptionalAttribute(dbVariformElement, A_SCOPE, getScopePathName(gkey, scopeLevel));&#xA;&#xA;        setAttributeFromField(dbVariformElement, CREATOR, ConfigSettingField.CFGVAR_CREATOR);&#xA;        setAttributeFromField(dbVariformElement, CHANGER, ConfigSettingField.CFGVAR_CHANGER);&#xA;&#xA;        return dbVariformElement&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;&#xA;    private String DBVARIFORM = &quot;db-variform-file-definition&quot;;&#xA;    private String NAME = &quot;cfgvar-name&quot;;&#xA;    private String DESCRIPTION = &quot;cfgvar-description&quot;;&#xA;    private String ENABLED = &quot;cfgvar-enabled&quot;;&#xA;    private String VARIFORM_XML = &quot;cfgvar-variform-xml&quot;;&#xA;    private String VARIFORM_IDS = &quot;cfgvar-variform-ids&quot;;&#xA;    private String A_SCOPE = &quot;scope&quot;;&#xA;    private String SCOPE_LEVEL = &quot;cfgvar-scope-level&quot;;&#xA;    private String SCOPE_GKEY = &quot;cfgvar-scope-gkey&quot;&#xA;    private String CREATED = &quot;cfgvar-created&quot;;&#xA;    private String CREATOR = &quot;cfgvar-creator&quot;;&#xA;    private String CHANGED = &quot;cfgvar-changed&quot;;&#xA;    private String CHANGER = &quot;cfgvar-changer&quot;;&#xA;}" />
    <extension name="SnxDbVariformFileDefinitionImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.AbstractScopeAwareSnxImporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.ConfigSettingField&#xA;import com.navis.framework.configuration.variform.DbVariformFileDefinition&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import org.jdom.Element&#xA;&#xA;public class SnxDbVariformFileDefinitionImporter extends AbstractScopeAwareSnxImporter implements EBean {&#xA;&#xA;    @Override&#xA;    void parseElement(Element inElement) throws BizViolation {&#xA;        recordIdentifier(inElement, NAME);&#xA;        //get Name.&#xA;        String variformName = getRequiredAttributeStringValue(inElement, NAME);&#xA;&#xA;        DbVariformFileDefinition definition = DbVariformFileDefinition.findDbVariformByName(variformName);&#xA;        if (definition == null) {&#xA;            definition = new DbVariformFileDefinition();&#xA;            definition.setCfgvarName(variformName);&#xA;            definition.setCfgvarCreated(TimeUtils.getCurrentTime());&#xA;            String userId = ContextHelper.getThreadUserId();&#xA;            if (userId != null) {&#xA;                definition.setCfgvarCreator(userId);&#xA;            }&#xA;            String xml = getOptionalAttributeString(inElement, VARIFORM_XML, null);&#xA;            if (xml != null) {&#xA;                definition.setCfgvarVariformXml(xml);&#xA;            }&#xA;            setScope(inElement, definition);&#xA;            HibernateApi.getInstance().save(definition);&#xA;        } else {&#xA;            setScope(inElement, definition);&#xA;            setOptionalProperty(inElement, VARIFORM_XML, definition, ConfigSettingField.CFGVAR_VARIFORM_XML);&#xA;        }&#xA;        setOptionalProperty(inElement, DESCRIPTION, definition, ConfigSettingField.CFGVAR_DESCRIPTION);&#xA;        setOptionalProperty(inElement, ENABLED, definition, ConfigSettingField.CFGVAR_ENABLED);&#xA;        setOptionalProperty(inElement, VARIFORM_IDS, definition, ConfigSettingField.CFGVAR_VARIFORM_IDS);&#xA;        definition.setCfgvarChanged(TimeUtils.getCurrentTime());&#xA;        String userId = ContextHelper.getThreadUserId();&#xA;        if (userId != null) {&#xA;            definition.setCfgvarChanger(userId);&#xA;        }&#xA;    }&#xA;&#xA;    private void setScope(Element inElement, DbVariformFileDefinition definition) {&#xA;        Map&lt;String, String&gt; identifierMap = new HashMap&lt;&gt;();&#xA;        String scope = getOptionalAttributeString(inElement, A_SCOPE, null);&#xA;        if (scope == null) {&#xA;            identifierMap.put(A_SCOPE, &quot;GLOBAL&quot;);&#xA;        } else {&#xA;            identifierMap.put(A_SCOPE, scope);&#xA;        }&#xA;        recordIdentifier(inElement, identifierMap);&#xA;        AbstractScopeAwareSnxImporter.ScopeInfo scopeInfo = getScopeInfo(scope, A_SCOPE);&#xA;        ScopeCoordinates scopeCoordinates = getScopeCoordinates(scopeInfo);&#xA;        if (scopeCoordinates != null) {&#xA;            if (scopeCoordinates.isScopeGlobal()) {&#xA;                definition.setCfgvarScopeLevel(ScopeCoordinates.GLOBAL_LEVEL);&#xA;            } else {&#xA;                int inScope = scopeCoordinates.getMaxScopeLevel();&#xA;                definition.setCfgvarScopeLevel((long) inScope);&#xA;                definition.setCfgvarScopeGkey(String.valueOf(scopeCoordinates.getScopeLevelCoord(inScope)));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;&#xA;    private String DBVARIFORM = &quot;db-variform-file-definition&quot;;&#xA;    private String NAME = &quot;cfgvar-name&quot;;&#xA;    private String DESCRIPTION = &quot;cfgvar-description&quot;;&#xA;    private String ENABLED = &quot;cfgvar-enabled&quot;;&#xA;    private String VARIFORM_XML = &quot;cfgvar-variform-xml&quot;;&#xA;    private String VARIFORM_IDS = &quot;cfgvar-variform-ids&quot;;&#xA;    private String SCOPE_LEVEL = &quot;cfgvar-scope-level&quot;;&#xA;    private String SCOPE_GKEY = &quot;cfgvar-scope-gkey&quot;&#xA;    private String CREATED = &quot;cfgvar-created&quot;;&#xA;    private String CREATOR = &quot;cfgvar-creator&quot;;&#xA;    private String CHANGED = &quot;cfgvar-changed&quot;;&#xA;    private String CHANGER = &quot;cfgvar-changer&quot;;&#xA;    private String A_SCOPE = &quot;scope&quot;;&#xA;}" />
    <extension name="SnxNoticeRequestImporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.snx.AbstractSnxEntityImporter&#xA;import com.navis.extension.business.Extension&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.query.business.SavedPredicate&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyImpl&#xA;import com.navis.services.ServicesEntity&#xA;import com.navis.services.ServicesField&#xA;import com.navis.services.business.event.NoticeRequest&#xA;import com.navis.services.business.rules.EventType&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; * Modified version of built-in General Notice SNX importer. Searches for unique general notice entries by also using the code extension name in the search query.&#xA; */&#xA;public class SnxNoticeRequestImporter extends com.navis.services.business.event.SnxNoticeRequestImporter implements EBean {&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(SnxNoticeRequestImporter.class);&#xA;&#xA;    @Override&#xA;    public void parseElement(Element inElement) throws BizViolation {&#xA;        LogicalEntityEnum businessEntity = (LogicalEntityEnum) getRequiredAttributeValue(inElement, A_BUSINESS_ENTITY, LogicalEntityEnum.class);&#xA;        String eventTypeId = getRequiredAttributeStringValue(inElement, A_EVENT_TYPE);&#xA;        String action = getRequiredAttributeStringValue(inElement, A_ACTION);&#xA;        String businessEntityId = (String) getOptionalAttributeValue(inElement, A_BUSINESS_ENTITY_ID, String.class, null);&#xA;        String emailAddress = (String) getOptionalAttributeValue(inElement, A_EMAIL_ADDRESS, String.class, null);&#xA;        String emailParty = (String) getOptionalAttributeValue(inElement, A_EMAIL_PARTY, String.class, null);&#xA;        String extensionName = (String) getOptionalAttributeValue(inElement, A_CODE_EXTENSION_NAME, String.class, null);&#xA;&#xA;        Map tagValuePair = new HashMap();&#xA;        tagValuePair.put(A_BUSINESS_ENTITY, businessEntity.getKey());&#xA;        tagValuePair.put(A_EVENT_TYPE, eventTypeId);&#xA;        tagValuePair.put(A_ACTION, action);&#xA;&#xA;        recordIdentifier(inElement, tagValuePair);&#xA;&#xA;        EventType eventType = (EventType) getRequiredAttributeValue(inElement, A_EVENT_TYPE, EventType.class);&#xA;        List&lt;NoticeRequest&gt; noticeRequestList = findNoticeRequests(eventType, businessEntity,&#xA;                ContextHelper.getThreadComplex(), emailAddress, emailParty, null, businessEntityId, extensionName);&#xA;        NoticeRequest noticeRequest = null;&#xA;        if (noticeRequestList != null) {&#xA;            if (noticeRequestList.size() &gt; 1) {&#xA;                String errorMessage = &quot;Found more than one General Notice&quot;;&#xA;                PropertyKey propertyKey = new PropertyKeyImpl(errorMessage);&#xA;                throw BizViolation.create(propertyKey, null, null);&#xA;            } else if (noticeRequestList.size() == 1) {&#xA;                noticeRequest = noticeRequestList.get(0);&#xA;            }&#xA;        }&#xA;        if (noticeRequest == null) {&#xA;            noticeRequest = new NoticeRequest();&#xA;            setRequiredProperty(inElement, A_EVENT_TYPE, noticeRequest, ServicesField.NOTICE_EVENT_TYPE);&#xA;            setRequiredProperty(inElement, A_BUSINESS_ENTITY, noticeRequest, ServicesField.NOTICE_APPLIED_TO_CLASS);&#xA;        } else {&#xA;            setRequiredProperty(inElement, A_EVENT_TYPE, noticeRequest, ServicesField.NOTICE_EVENT_TYPE);&#xA;        }&#xA;&#xA;        setOptionalProperty(inElement, A_CODE_EXTENSION_NAME, noticeRequest, ServicesField.NOTICE_CODE_EXTENSION);&#xA;        setOptionalProperty(inElement, A_BUSINESS_ENTITY_ID, noticeRequest, ServicesField.NOTICE_APPLIED_TO_NATURAL_ID);&#xA;        setOptionalProperty(inElement, A_ACTION, noticeRequest, ServicesField.NOTICE_ACTION);&#xA;        setOptionalProperty(inElement, A_EMAIL_ADDRESS, noticeRequest, ServicesField.NOTICE_EMAIL_ADDRESS);&#xA;        setOptionalProperty(inElement, A_EMAIL_PARTY, noticeRequest, ServicesField.NOTICE_PATH_TO_EMAIL_BIZ_UNIT);&#xA;        setOptionalProperty(inElement, A_SUSPEND_DATE, noticeRequest, ServicesField.NOTICE_SUSPENDED_DATE);&#xA;        setOptionalProperty(inElement, A_PRINTER_ADDRESS, noticeRequest, ServicesField.NOTICE_PRINTER_HOST_ADDRESS);&#xA;        setOptionalProperty(inElement, A_SMS_ADDRESS, noticeRequest, ServicesField.NOTICE_SMS_ADDRESS);&#xA;        setOptionalProperty(inElement, A_EMAIL_LANGUAGE, noticeRequest, ServicesField.NOTICE_EMAIL_LANGUAGE);&#xA;        setOptionalProperty(inElement, A_DESCRIPTION, noticeRequest, ServicesField.NOTICE_DESCRIPTION);&#xA;&#xA;        //2009-10-12 spabbala v2.0.1, 2.1.C ARGO-21058 Missing Fields Universal Query General Notices&#xA;        setOptionalProperty(inElement, A_NOTICE_SENT_COUNT, noticeRequest, ServicesField.NOTICE_SENT_COUNT);&#xA;        setOptionalProperty(inElement, A_NOTICE_CREATED, noticeRequest, ServicesField.NOTICE_CREATED);&#xA;        setOptionalProperty(inElement, A_NOTICE_CREATOR, noticeRequest, ServicesField.NOTICE_CREATOR);&#xA;        setOptionalProperty(inElement, A_NOTICE_CHANGED, noticeRequest, ServicesField.NOTICE_CHANGED);&#xA;        setOptionalProperty(inElement, A_NOTICE_CHANGER, noticeRequest, ServicesField.NOTICE_CHANGER);&#xA;&#xA;        Element filterElement = inElement.getChild(E_FILTER, inElement.getNamespace());&#xA;        if (filterElement != null) {&#xA;            parseFilterElement(filterElement, noticeRequest);&#xA;        }&#xA;&#xA;        Element msgTemplateElement = inElement.getChild(E_MESSAGE_TEMPLATE, inElement.getNamespace());&#xA;        if (msgTemplateElement != null) {&#xA;            noticeRequest.setNoticeMsgTemplate(msgTemplateElement.getText());&#xA;        }&#xA;&#xA;        HibernateApi.getInstance().saveOrUpdate(noticeRequest);&#xA;    }&#xA;&#xA;    static List findNoticeRequests(EventType inEventType, LogicalEntityEnum inAppliedToClass,&#xA;                                   Complex inComplex, String inEmailAddress, String inPathToEmailBizUnit,&#xA;                                   Serializable inAppliedToPrimaryKey, String inAppliedToNaturalId, String extensionName) {&#xA;&#xA;        // Only notice requests without filters can be compared&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ServicesEntity.NOTICE_REQUEST)&#xA;                .addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_EVENT_TYPE, inEventType.getEvnttypeGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_APPLIED_TO_CLASS, inAppliedToClass))&#xA;                .addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_COMPLEX, inComplex.getCpxGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_EMAIL_ADDRESS, inEmailAddress))&#xA;                .addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_PATH_TO_EMAIL_BIZ_UNIT, inPathToEmailBizUnit));&#xA;&#xA;        // Entries which now include an instance key should only be compared with other entries for a specific instance&#xA;        if (inAppliedToPrimaryKey != null) {&#xA;            dq.addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_APPLIED_TO_PRIMARY_KEY, inAppliedToPrimaryKey));&#xA;        } else {&#xA;            dq.addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_APPLIED_TO_NATURAL_ID, inAppliedToNaturalId));&#xA;        }&#xA;&#xA;        if (extensionName != null) {&#xA;            List&lt;Extension&gt; extensionList = Extension.findExtensions(extensionName);&#xA;            if (extensionList != null &amp;&amp; !extensionList.isEmpty()) {&#xA;                Extension extension = extensionList.get(0);&#xA;                dq.addDqPredicate(PredicateFactory.eq(ServicesField.NOTICE_CODE_EXTENSION, extension.getExtGkey()));&#xA;            }else{&#xA;                LOGGER.error(&quot;Invalid Extension Name:&quot;+extensionName);&#xA;            }&#xA;        }&#xA;&#xA;        return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    }&#xA;&#xA;&#xA;    private void parseFilterElement(Element inFilterElement, NoticeRequest inNoticeRequest) {&#xA;        Element predicateElement = inFilterElement.getChild(E_PREDICATE, inFilterElement.getNamespace());&#xA;        SavedPredicate filter = null;&#xA;        if (predicateElement != null) {&#xA;            filter = new SavedPredicate(predicateElement);&#xA;        }&#xA;        inNoticeRequest.updateFilter(filter);&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return null&#xA;    }&#xA;}&#xA;" />
    <extension name="SnxGeneralReferenceExporter" type="BEAN_PROTOTYPE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.argo.ArgoEntity&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.snx.AbstractSnxXmlExporter&#xA;import com.navis.external.framework.beans.EBean&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.DomainQueryImpl&#xA;import org.jdom.Element&#xA;&#xA;class SnxGeneralReferenceExporter extends AbstractSnxXmlExporter implements EBean {&#xA;&#xA;    public SnxGeneralReferenceExporter() {&#xA;        super(null, null);&#xA;    }&#xA;&#xA;    protected DomainQuery createScalarQuery() {&#xA;        DomainQuery domainQuery = new DomainQueryImpl(ArgoEntity.GENERAL_REFERENCE)&#xA;                .addDqField(ArgoField.REF_TYPE)&#xA;                .addDqField(ArgoField.REF_ID1)&#xA;                .addDqField(ArgoField.REF_ID2)&#xA;                .addDqField(ArgoField.REF_ID3)&#xA;                .addDqField(ArgoField.REF_VALUE1)&#xA;                .addDqField(ArgoField.REF_VALUE2)&#xA;                .addDqField(ArgoField.REF_VALUE3)&#xA;                .addDqField(ArgoField.REF_VALUE4)&#xA;                .addDqField(ArgoField.REF_VALUE5)&#xA;                .addDqField(ArgoField.REF_VALUE6)&#xA;                .addDqField(ArgoField.REF_CREATOR)&#xA;                .addDqField(ArgoField.REF_CREATED)&#xA;                .addDqField(ArgoField.REF_CHANGER)&#xA;                .addDqField(ArgoField.REF_CHANGED);&#xA;        return domainQuery;&#xA;    }&#xA;&#xA;    protected Element createOneEntityElement() {&#xA;        Element element = createElement(ArgoEntity.GENERAL_REFERENCE);&#xA;&#xA;        setAttributeFromField(element, ArgoField.REF_TYPE.getFieldId(), ArgoField.REF_TYPE);&#xA;        setAttributeFromField(element, ArgoField.REF_ID1.getFieldId(), ArgoField.REF_ID1);&#xA;        setAttributeFromField(element, ArgoField.REF_ID2.getFieldId(), ArgoField.REF_ID2);&#xA;&#x9;&#x9;setAttributeFromField(element, ArgoField.REF_ID3.getFieldId(), ArgoField.REF_ID3);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE1.getFieldId(), ArgoField.REF_VALUE1);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE2.getFieldId(), ArgoField.REF_VALUE2);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE3.getFieldId(), ArgoField.REF_VALUE3);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE4.getFieldId(), ArgoField.REF_VALUE4);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE5.getFieldId(), ArgoField.REF_VALUE5);&#xA;        setAttributeFromField(element, ArgoField.REF_VALUE6.getFieldId(), ArgoField.REF_VALUE6);&#xA;        setAttributeFromField(element, ArgoField.REF_CREATOR.getFieldId(), ArgoField.REF_CREATOR);&#xA;        setAttributeFromField(element, ArgoField.REF_CREATED.getFieldId(), ArgoField.REF_CREATED);&#xA;        setAttributeFromField(element, ArgoField.REF_CHANGER.getFieldId(), ArgoField.REF_CHANGER);&#xA;        setAttributeFromField(element, ArgoField.REF_CHANGED.getFieldId(), ArgoField.REF_CHANGED);&#xA;&#xA;        return element;&#xA;    }&#xA;&#xA;    @Override&#xA;    String getDetailedDiagnostics() {&#xA;        return &quot;SNX Exporter for General Reference&quot;;&#xA;    }&#xA;}&#xA;" />
    <extension name="RegisterCustomBeans" type="SERVER_LIFECYCLE" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2021 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.extension.ad&#xA;&#xA;import com.navis.extension.invocation.dynamiccode.beans.definition.CustomCodeExtensionDrivenBeanDefinition&#xA;import com.navis.extension.invocation.dynamiccode.groovy.beans.GroovyFactoryBean&#xA;import com.navis.external.framework.server.AbstractServerLifecycle&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.context.bean.BeanCreationTypeEnum&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.slf4j.Logger&#xA;import org.slf4j.LoggerFactory&#xA;import org.springframework.beans.factory.BeanFactory&#xA;import org.springframework.beans.factory.config.BeanDefinition&#xA;import org.springframework.beans.factory.support.BeanDefinitionRegistry&#xA;import org.springframework.context.ConfigurableApplicationContext&#xA;&#xA;/**&#xA; * This class is used to register custom Spring beans for SNX IMPORT&#xA; */&#xA;public class RegisterCustomBeans extends AbstractServerLifecycle {&#xA;    private static final Logger LOGGER = LoggerFactory.getLogger(RegisterCustomBeans.class);&#xA;&#xA;    @Override&#xA;    public void onInitialization() {&#xA;        PersistenceTemplate pt = new PersistenceTemplate(getUserContext());&#xA;        CarinaPersistenceCallback cb = new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            public void doInTransaction() {&#xA;                try {&#xA;                    initializeInTransaction();&#xA;                }&#xA;                catch (Exception e) {&#xA;                    LOGGER.error(&quot;Snx Extension: Initialization Failure&quot;);&#xA;                    LOGGER.error(&quot;&quot;, e);&#xA;                }&#xA;            }&#xA;        };&#xA;        pt.invoke(cb);&#xA;    }&#xA;&#xA;    /**&#xA;     * Entry point that allows this class to be run as a script runner script&#xA;     * @return list of registered beans&#xA;     */&#xA;    public String execute() {&#xA;        return initializeInTransaction();&#xA;    }&#xA;&#xA;    public String initializeInTransaction() {&#xA;        StringBuilder beans = new StringBuilder();&#xA;        beans.append(addToRoastery(DB_VARIFORM_DEFINITION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(DB_VARIFORM_DEFINITION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HOLD_PERMISSION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HOLD_PERMISSION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_GROUP_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_GROUP_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_USER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_USER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_ECUSER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(XPE_ECUSER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BACKGROUND_JOB_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BACKGROUND_JOB_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRUCK_ACTION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRUCK_ACTION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(PERSISTENT_RESOURCE_BUNDLE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(PERSISTENT_RESOURCE_BUNDLE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(NOTICE_REQUEST_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_LOAD_REQUEST_CODE_MAPPING_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_LOAD_REQUEST_CODE_MAPPING_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_GROOVY_JOB_DEFINITION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_GROOVY_JOB_DEFINITION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(GENERAL_REFERENCE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(GENERAL_REFERENCE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_CONFIGURATION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(JOB_CONFIGURATION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CHASSIS_PROFILE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CHASSIS_PROFILE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_SEQUENCE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(ARGO_SEQUENCE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_NODE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CUSTOM_NODE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_MODEL_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_MODEL_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_USER_RANGE_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(BERTH_USER_RANGE_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(WORKSTATION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(WORKSTATION_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CREDIT_CARD_READER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(CREDIT_CARD_READER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRADING_PARTNER_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(TRADING_PARTNER_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HAZ_IMPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(HAZ_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(&quot;snxSessionImporter&quot;, EDISESSION_IMPORTER));&#xA;        beans.append(addToRoastery(EXTENSION_EXPORTER)).append(&quot;\n&quot;);&#xA;        beans.append(addToRoastery(EXTENSION_IMPORTER)).append(&quot;\n&quot;);&#xA;&#xA;        return beans.toString();&#xA;    }&#xA;&#xA;    public String addToRoastery(String inExtensionName) {&#xA;        String extensionName = StringUtils.capitalize(inExtensionName);&#xA;        String beanName = StringUtils.uncapitalize(inExtensionName);&#xA;        addToRoastery(beanName, extensionName);&#xA;        return beanName + &quot; -&gt; &quot; + extensionName;&#xA;    }&#xA;&#xA;    public void addToRoastery(String inBeanName, String inExtensionName) {&#xA;        registerBean(Roastery.getBeanFactory(), inBeanName, inExtensionName);&#xA;    }&#xA;&#xA;    public void registerBean(BeanFactory inFactory, String inBeanName, String inExtensionName) {&#xA;        BeanDefinitionRegistry registry = getRegistry(inFactory);&#xA;        BeanDefinition beanDef = new CustomCodeExtensionDrivenBeanDefinition(BeanCreationTypeEnum.NEW_CUSTOM_CODE_EXTENSION, inBeanName,&#xA;                inExtensionName);&#xA;        beanDef.setScope(BeanDefinition.SCOPE_PROTOTYPE);&#xA;        beanDef.setBeanClassName(GroovyFactoryBean.class.getCanonicalName());&#xA;&#xA;        // constructor set to code extension name&#xA;        beanDef.getConstructorArgumentValues().addIndexedArgumentValue(0, inExtensionName);&#xA;        registry.registerBeanDefinition(inBeanName, beanDef);&#xA;    }&#xA;&#xA;    private BeanDefinitionRegistry getRegistry(BeanFactory inFactory) {&#xA;        BeanDefinitionRegistry registry = null;&#xA;        if (inFactory instanceof ConfigurableApplicationContext) {&#xA;            inFactory = ((ConfigurableApplicationContext) inFactory).getBeanFactory();&#xA;        }&#xA;        if (!(inFactory instanceof BeanDefinitionRegistry)) {&#xA;            throw BizFailure.create(inFactory + &quot; was NOT a an instanceOf BeanDefinitionRegistry and cannot be overridden&quot;);&#xA;        } else {&#xA;            registry = (BeanDefinitionRegistry) inFactory;&#xA;        }&#xA;        return registry;&#xA;    }&#xA;&#xA;    private final String DB_VARIFORM_DEFINITION_EXPORTER = &quot;SnxDbVariformFileDefinitionExporter&quot;;&#xA;    private final String DB_VARIFORM_DEFINITION_IMPORTER = &quot;SnxDbVariformFileDefinitionImporter&quot;;&#xA;    private final String HOLD_PERMISSION_EXPORTER = &quot;SnxHoldPermissionViewExporter&quot;;&#xA;    private final String HOLD_PERMISSION_IMPORTER = &quot;SnxHoldPermissionViewImporter&quot;;&#xA;    private final String JOB_GROUP_EXPORTER = &quot;SnxJobGroupExporter&quot;;&#xA;    private final String JOB_GROUP_IMPORTER = &quot;SnxJobGroupImporter&quot;;&#xA;    private final String XPE_USER_EXPORTER = &quot;SnxXpeUserExporter&quot;;&#xA;    private final String XPE_USER_IMPORTER = &quot;SnxXpeUserImporter&quot;;&#xA;    private final String XPE_ECUSER_EXPORTER = &quot;SnxEcUserExporter&quot;;&#xA;    private final String XPE_ECUSER_IMPORTER = &quot;SnxEcUserImporter&quot;;&#xA;    private final String BACKGROUND_JOB_EXPORTER = &quot;SnxBackgroundJobExporter&quot;;&#xA;    private final String BACKGROUND_JOB_IMPORTER = &quot;SnxBackgroundJobImporter&quot;;&#xA;    private final String TRUCK_ACTION_EXPORTER = &quot;SnxTruckActionExporter&quot;;&#xA;    private final String TRUCK_ACTION_IMPORTER = &quot;SnxTruckActionImporter&quot;;&#xA;    private final String PERSISTENT_RESOURCE_BUNDLE_IMPORTER = &quot;SnxPersistentResourceBundleImporter&quot;;&#xA;    private final String PERSISTENT_RESOURCE_BUNDLE_EXPORTER = &quot;SnxPersistentResourceBundleExporter&quot;;&#xA;    private final String CUSTOM_LOAD_REQUEST_CODE_MAPPING_IMPORTER = &quot;SnxCustomLoadRequestCodeMappingImporter&quot;;&#xA;    private final String CUSTOM_LOAD_REQUEST_CODE_MAPPING_EXPORTER = &quot;SnxCustomLoadRequestCodeMappingExporter&quot;;&#xA;    private final String NOTICE_REQUEST_IMPORTER = &quot;SnxNoticeRequestImporter&quot;;&#xA;    private final String ARGO_GROOVY_JOB_DEFINITION_EXPORTER = &quot;SnxArgoGroovyJobDefinitionExporter&quot;;&#xA;    private final String ARGO_GROOVY_JOB_DEFINITION_IMPORTER = &quot;SnxArgoGroovyJobDefinitionImporter&quot;;&#xA;    private final String GENERAL_REFERENCE_EXPORTER = &quot;SnxGeneralReferenceExporter&quot;;&#xA;    private final String GENERAL_REFERENCE_IMPORTER = &quot;SnxGeneralReferenceImporter&quot;;&#xA;    private final String JOB_CONFIGURATION_EXPORTER = &quot;SnxJobConfigurationExporter&quot;;&#xA;    private final String JOB_CONFIGURATION_IMPORTER = &quot;SnxJobConfigurationImporter&quot;;&#xA;    private final String CHASSIS_PROFILE_EXPORTER = &quot;SnxChassisProfileExporter&quot;;&#xA;    private final String CHASSIS_PROFILE_IMPORTER = &quot;SnxChassisProfileImporter&quot;;&#xA;    private final String ARGO_SEQUENCE_EXPORTER = &quot;SnxArgoSequenceExporter&quot;;&#xA;    private final String ARGO_SEQUENCE_IMPORTER = &quot;SnxArgoSequenceImporter&quot;;&#xA;    private final String CUSTOM_NODE_EXPORTER = &quot;SnxCustomNodeExporter&quot;;&#xA;    private final String CUSTOM_NODE_IMPORTER = &quot;SnxCustomNodeImporter&quot;;&#xA;    private final String BERTH_MODEL_EXPORTER = &quot;SnxBerthModelExporter&quot;;&#xA;    private final String BERTH_MODEL_IMPORTER = &quot;SnxBerthModelImporter&quot;;&#xA;    private final String BERTH_USER_RANGE_EXPORTER = &quot;SnxBerthUserRangeExporter&quot;;&#xA;    private final String BERTH_USER_RANGE_IMPORTER = &quot;SnxBerthUserRangeImporter&quot;;&#xA;    private final String WORKSTATION_EXPORTER = &quot;SnxWorkstationExporter&quot;;&#xA;    private final String WORKSTATION_IMPORTER = &quot;SnxWorkstationImporter&quot;;&#xA;    private final String CREDIT_CARD_READER_EXPORTER = &quot;SnxCreditCardReaderExporter&quot;;&#xA;    private final String CREDIT_CARD_READER_IMPORTER = &quot;SnxCreditCardReaderImporter&quot;;&#xA;    private final String TRADING_PARTNER_EXPORTER = &quot;SnxEdiTradingPartnerImporter&quot;;&#xA;    private final String TRADING_PARTNER_IMPORTER = &quot;SnxEdiTradingPartnerExporter&quot;;&#xA;    private final String EDISESSION_IMPORTER = &quot;SnxEdiSessionImporter&quot;;&#xA;    private final String HAZ_IMPORTER = &quot;SnxHazardousGoodsImporter&quot;;&#xA;    private final String HAZ_EXPORTER = &quot;SnxHazardousGoodsExporter&quot;;&#xA;    private final String EXTENSION_EXPORTER = &quot;SnxExtensionExporter&quot;;&#xA;    private final String EXTENSION_IMPORTER = &quot;SnxExtensionImporter&quot;;&#xA;}" />
</argo:snx>

